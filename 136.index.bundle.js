"use strict";(self.webpackChunkboilerplateApp=self.webpackChunkboilerplateApp||[]).push([[136],{308:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Z\": () => (/* binding */ CIcon)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(294);\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nvar propTypes = {exports: {}};\n\nvar reactIs = {exports: {}};\n\nvar reactIs_production_min = {};\n\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;\nreactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return \"object\"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};\nreactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};\nreactIs_production_min.isValidElementType=function(a){return \"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;\n\nvar reactIs_development = {};\n\n/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (false) {}\n\nif (true) {\n  reactIs.exports = reactIs_production_min;\n} else {}\n\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret$3;\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar printWarning$1 = function() {};\n\nif (false) { var has$1, loggedTypeFailures, ReactPropTypesSecret$2; }\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {\n  if (false) { var stack, err, error, typeSpecName; }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes$1.resetWarningCache = function() {\n  if (false) {}\n};\n\nvar checkPropTypes_1 = (/* unused pure expression or super */ null && (checkPropTypes$1));\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactIs$1 = reactIs.exports;\nvar assign = (/* unused pure expression or super */ null && (objectAssign));\n\nvar ReactPropTypesSecret$1 = (/* unused pure expression or super */ null && (ReactPropTypesSecret_1));\nvar checkPropTypes = (/* unused pure expression or super */ null && (checkPropTypes_1));\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning = function() {};\n\nif (false) {}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nvar factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (false) { var manualPropTypeWarningCount, manualPropTypeCallCache; }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret$1) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (false) { var cacheKey; }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs$1.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (false) {}\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n       false ? 0 : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = ReactPropTypesSecret_1;\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nvar factoryWithThrowingShims = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  }  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  }  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  propTypes.exports = factoryWithThrowingShims();\n}\n\nvar PropTypes = propTypes.exports;\n\nvar classnames = {exports: {}};\n\n/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n(function (module) {\n/* global define */\n\n(function () {\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n}(classnames));\n\nvar classNames = classnames.exports;\n\nvar toCamelCase = function (str) {\n    return str\n        .replace(/([-_][a-z0-9])/gi, function ($1) {\n        return $1.toUpperCase();\n    })\n        .replace(/-/gi, '');\n};\nvar CIcon = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var className = _a.className, content = _a.content, customClassName = _a.customClassName, height = _a.height, icon = _a.icon, name = _a.name, size = _a.size, title = _a.title, use = _a.use, width = _a.width, rest = __rest(_a, [\"className\", \"content\", \"customClassName\", \"height\", \"icon\", \"name\", \"size\", \"title\", \"use\", \"width\"]);\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), change = _c[0], setChange = _c[1];\n    var _icon = icon || content || name;\n    if (content) {\n        process &&\n            process.env &&\n            \"production\" === 'development' &&\n            0;\n    }\n    if (name) {\n        process &&\n            process.env &&\n            \"production\" === 'development' &&\n            0;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () { return setChange(change + 1); }, [_icon, JSON.stringify(_icon)]);\n    var iconName = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return _icon && typeof _icon === 'string' && _icon.includes('-') ? toCamelCase(_icon) : _icon;\n    }, [change]);\n    var titleCode = title ? \"<title>\" + title + \"</title>\" : '';\n    var code = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        if (Array.isArray(_icon)) {\n            return _icon;\n        }\n        if (typeof _icon === 'string' && react__WEBPACK_IMPORTED_MODULE_0__.icons) {\n            return react__WEBPACK_IMPORTED_MODULE_0__.icons[iconName];\n        }\n    }, [change]);\n    var iconCode = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        return Array.isArray(code) ? code[1] || code[0] : code;\n    }, [change]);\n    var scale = (function () {\n        return Array.isArray(code) && code.length > 1 ? code[0] : '64 64';\n    })();\n    var viewBox = (function () {\n        return rest['viewBox'] || \"0 0 \" + scale;\n    })();\n    // render\n    var _className = customClassName\n        ? classNames(customClassName)\n        : classNames('icon', (_b = {},\n            _b[\"icon-\" + size] = size,\n            _b[\"icon-custom-size\"] = height || width,\n            _b), className);\n    return use ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({ xmlns: \"http://www.w3.org/2000/svg\", className: _className }, (height && { height: height }), (width && { width: width }), { role: \"img\" }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"use\", { href: use }))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({ xmlns: \"http://www.w3.org/2000/svg\", viewBox: viewBox, className: _className }, (height && { height: height }), (width && { width: width }), { role: \"img\", dangerouslySetInnerHTML: { __html: titleCode + iconCode } }, rest, { ref: ref })));\n});\nCIcon.propTypes = {\n    className: PropTypes.string,\n    content: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n    customClassName: PropTypes.string,\n    height: PropTypes.number,\n    icon: PropTypes.oneOfType([PropTypes.array, PropTypes.string]),\n    name: PropTypes.string,\n    size: PropTypes.oneOf([\n        'custom',\n        'custom-size',\n        'sm',\n        'lg',\n        'xl',\n        'xxl',\n        '3xl',\n        '4xl',\n        '5xl',\n        '6xl',\n        '7xl',\n        '8xl',\n        '9xl',\n    ]),\n    title: PropTypes.any,\n    use: PropTypes.any,\n    width: PropTypes.number,\n};\nCIcon.displayName = 'CIcon';\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///308\n")},992:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"$\": () => (/* binding */ cilBell)\n/* harmony export */ });\nconst cilBell = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M450.27,348.569,406.6,267.945V184c0-83.813-68.187-152-152-152s-152,68.187-152,152v83.945L58.928,348.568A24,24,0,0,0,80.031,384h86.935c-.238,2.636-.367,5.3-.367,8a88,88,0,0,0,176,0c0-2.7-.129-5.364-.367-8h86.935a24,24,0,0,0,21.1-35.431ZM310.6,392a56,56,0,1,1-111.419-8H310.018A56.14,56.14,0,0,1,310.6,392ZM93.462,352,134.6,276.055V184a120,120,0,0,1,240,0v92.055L415.736,352Z' class='ci-primary'/>\"]//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTkyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYm9pbGVycGxhdGVBcHAvLi9ub2RlX21vZHVsZXMvQGNvcmV1aS9pY29ucy9qcy9mcmVlL2NpbC1iZWxsLmpzPzZiNzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNpbEJlbGwgPSBbXCI1MTIgNTEyXCIsXCI8cGF0aCBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBkPSdNNDUwLjI3LDM0OC41NjksNDA2LjYsMjY3Ljk0NVYxODRjMC04My44MTMtNjguMTg3LTE1Mi0xNTItMTUycy0xNTIsNjguMTg3LTE1MiwxNTJ2ODMuOTQ1TDU4LjkyOCwzNDguNTY4QTI0LDI0LDAsMCwwLDgwLjAzMSwzODRoODYuOTM1Yy0uMjM4LDIuNjM2LS4zNjcsNS4zLS4zNjcsOGE4OCw4OCwwLDAsMCwxNzYsMGMwLTIuNy0uMTI5LTUuMzY0LS4zNjctOGg4Ni45MzVhMjQsMjQsMCwwLDAsMjEuMS0zNS40MzFaTTMxMC42LDM5MmE1Niw1NiwwLDEsMS0xMTEuNDE5LThIMzEwLjAxOEE1Ni4xNCw1Ni4xNCwwLDAsMSwzMTAuNiwzOTJaTTkzLjQ2MiwzNTIsMTM0LjYsMjc2LjA1NVYxODRhMTIwLDEyMCwwLDAsMSwyNDAsMHY5Mi4wNTVMNDE1LjczNiwzNTJaJyBjbGFzcz0nY2ktcHJpbWFyeScvPlwiXSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///992\n")},800:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"G\": () => (/* binding */ cilDescription)\n/* harmony export */ });\nconst cilDescription = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M334.627,16H48V496H472V153.373ZM440,166.627V168H320V48h1.373ZM80,464V48H288V200H440V464Z' class='ci-primary'/><rect width='224' height='32' x='136' y='296' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='224' height='32' x='136' y='376' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/>\"]//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODAwLmpzIiwibWFwcGluZ3MiOiI7OztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYm9pbGVycGxhdGVBcHAvLi9ub2RlX21vZHVsZXMvQGNvcmV1aS9pY29ucy9qcy9mcmVlL2NpbC1kZXNjcmlwdGlvbi5qcz8yNzczIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjaWxEZXNjcmlwdGlvbiA9IFtcIjUxMiA1MTJcIixcIjxwYXRoIGZpbGw9J3ZhcigtLWNpLXByaW1hcnktY29sb3IsIGN1cnJlbnRDb2xvciknIGQ9J00zMzQuNjI3LDE2SDQ4VjQ5Nkg0NzJWMTUzLjM3M1pNNDQwLDE2Ni42MjdWMTY4SDMyMFY0OGgxLjM3M1pNODAsNDY0VjQ4SDI4OFYyMDBINDQwVjQ2NFonIGNsYXNzPSdjaS1wcmltYXJ5Jy8+PHJlY3Qgd2lkdGg9JzIyNCcgaGVpZ2h0PSczMicgeD0nMTM2JyB5PScyOTYnIGZpbGw9J3ZhcigtLWNpLXByaW1hcnktY29sb3IsIGN1cnJlbnRDb2xvciknIGNsYXNzPSdjaS1wcmltYXJ5Jy8+PHJlY3Qgd2lkdGg9JzIyNCcgaGVpZ2h0PSczMicgeD0nMTM2JyB5PSczNzYnIGZpbGw9J3ZhcigtLWNpLXByaW1hcnktY29sb3IsIGN1cnJlbnRDb2xvciknIGNsYXNzPSdjaS1wcmltYXJ5Jy8+XCJdIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///800\n")},307:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"D\": () => (/* binding */ cilFile)\n/* harmony export */ });\nconst cilFile = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M334.627,16H48V496H472V153.373ZM440,166.627V168H320V48h1.373ZM80,464V48H288V200H440V464Z' class='ci-primary'/>\"]//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzA3LmpzIiwibWFwcGluZ3MiOiI7OztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYm9pbGVycGxhdGVBcHAvLi9ub2RlX21vZHVsZXMvQGNvcmV1aS9pY29ucy9qcy9mcmVlL2NpbC1maWxlLmpzPzhlYjciXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNpbEZpbGUgPSBbXCI1MTIgNTEyXCIsXCI8cGF0aCBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBkPSdNMzM0LjYyNywxNkg0OFY0OTZINDcyVjE1My4zNzNaTTQ0MCwxNjYuNjI3VjE2OEgzMjBWNDhoMS4zNzNaTTgwLDQ2NFY0OEgyODhWMjAwSDQ0MFY0NjRaJyBjbGFzcz0nY2ktcHJpbWFyeScvPlwiXSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///307\n")},142:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"E\": () => (/* binding */ cilNotes)\n/* harmony export */ });\nconst cilNotes = [\"512 512\",\"<rect width='288' height='32' x='112' y='152' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='288' height='32' x='112' y='240' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='152' height='32' x='112' y='328' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M480,48H32V464H480ZM448,432H64V80H448Z' class='ci-primary'/>\"]//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYm9pbGVycGxhdGVBcHAvLi9ub2RlX21vZHVsZXMvQGNvcmV1aS9pY29ucy9qcy9mcmVlL2NpbC1ub3Rlcy5qcz82ZTBmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjaWxOb3RlcyA9IFtcIjUxMiA1MTJcIixcIjxyZWN0IHdpZHRoPScyODgnIGhlaWdodD0nMzInIHg9JzExMicgeT0nMTUyJyBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBjbGFzcz0nY2ktcHJpbWFyeScvPjxyZWN0IHdpZHRoPScyODgnIGhlaWdodD0nMzInIHg9JzExMicgeT0nMjQwJyBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBjbGFzcz0nY2ktcHJpbWFyeScvPjxyZWN0IHdpZHRoPScxNTInIGhlaWdodD0nMzInIHg9JzExMicgeT0nMzI4JyBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBjbGFzcz0nY2ktcHJpbWFyeScvPjxwYXRoIGZpbGw9J3ZhcigtLWNpLXByaW1hcnktY29sb3IsIGN1cnJlbnRDb2xvciknIGQ9J000ODAsNDhIMzJWNDY0SDQ4MFpNNDQ4LDQzMkg2NFY4MEg0NDhaJyBjbGFzcz0nY2ktcHJpbWFyeScvPlwiXSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///142\n")},122:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"n\": () => (/* binding */ cilShortText)\n/* harmony export */ });\nconst cilShortText = [\"512 512\",\"<rect width='256' height='32' x='128' y='192' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='128' height='32' x='128' y='304' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M48,432H464V88H48ZM80,120H432V400H80Z' class='ci-primary'/>\"]//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwibWFwcGluZ3MiOiI7OztBQUFPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYm9pbGVycGxhdGVBcHAvLi9ub2RlX21vZHVsZXMvQGNvcmV1aS9pY29ucy9qcy9mcmVlL2NpbC1zaG9ydC10ZXh0LmpzPzYwZGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGNpbFNob3J0VGV4dCA9IFtcIjUxMiA1MTJcIixcIjxyZWN0IHdpZHRoPScyNTYnIGhlaWdodD0nMzInIHg9JzEyOCcgeT0nMTkyJyBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBjbGFzcz0nY2ktcHJpbWFyeScvPjxyZWN0IHdpZHRoPScxMjgnIGhlaWdodD0nMzInIHg9JzEyOCcgeT0nMzA0JyBmaWxsPSd2YXIoLS1jaS1wcmltYXJ5LWNvbG9yLCBjdXJyZW50Q29sb3IpJyBjbGFzcz0nY2ktcHJpbWFyeScvPjxwYXRoIGZpbGw9J3ZhcigtLWNpLXByaW1hcnktY29sb3IsIGN1cnJlbnRDb2xvciknIGQ9J000OCw0MzJINDY0Vjg4SDQ4Wk04MCwxMjBINDMyVjQwMEg4MFonIGNsYXNzPSdjaS1wcmltYXJ5Jy8+XCJdIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///122\n")},475:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"C_\": () => (/* binding */ CBadge),\n/* harmony export */   \"b7\": () => (/* binding */ CCol),\n/* harmony export */   \"KB\": () => (/* binding */ CContainer),\n/* harmony export */   \"PO\": () => (/* binding */ CHeader),\n/* harmony export */   \"qy\": () => (/* binding */ CHeaderBrand),\n/* harmony export */   \"g3\": () => (/* binding */ CHeaderNav),\n/* harmony export */   \"dw\": () => (/* binding */ CNavGroup),\n/* harmony export */   \"U6\": () => (/* binding */ CNavItem),\n/* harmony export */   \"AQ\": () => (/* binding */ CNavLink),\n/* harmony export */   \"fd\": () => (/* binding */ CNavTitle),\n/* harmony export */   \"rb\": () => (/* binding */ CRow),\n/* harmony export */   \"z3\": () => (/* binding */ CSidebar),\n/* harmony export */   \"Dl\": () => (/* binding */ CSidebarBrand),\n/* harmony export */   \"Xk\": () => (/* binding */ CSidebarNav),\n/* harmony export */   \"LQ\": () => (/* binding */ CSpinner)\n/* harmony export */ });\n/* unused harmony exports CAccordion, CAccordionBody, CAccordionButton, CAccordionCollapse, CAccordionHeader, CAccordionItem, CAlert, CAlertHeading, CAlertLink, CAvatar, CBackdrop, CBreadcrumb, CBreadcrumbItem, CButton, CButtonGroup, CButtonToolbar, CCallout, CCard, CCardBody, CCardFooter, CCardGroup, CCardHeader, CCardImage, CCardImageOverlay, CCardLink, CCardSubtitle, CCardText, CCardTitle, CCarousel, CCarouselCaption, CCarouselItem, CCloseButton, CCollapse, CDropdown, CDropdownDivider, CDropdownHeader, CDropdownItem, CDropdownItemPlain, CDropdownMenu, CDropdownToggle, CFooter, CForm, CFormCheck, CFormFeedback, CFormFloating, CFormInput, CFormLabel, CFormRange, CFormSelect, CFormSwitch, CFormText, CFormTextarea, CHeaderDivider, CHeaderText, CHeaderToggler, CImage, CInputGroup, CInputGroupText, CLink, CListGroup, CListGroupItem, CModal, CModalBody, CModalContent, CModalDialog, CModalFooter, CModalHeader, CModalTitle, CNav, CNavGroupItems, CNavbar, CNavbarBrand, CNavbarNav, CNavbarText, CNavbarToggler, COffcanvas, COffcanvasBody, COffcanvasHeader, COffcanvasTitle, CPagination, CPaginationItem, CPopover, CProgress, CProgressBar, CSidebarFooter, CSidebarHeader, CSidebarToggler, CTabContent, CTabPane, CTable, CTableBody, CTableCaption, CTableDataCell, CTableFoot, CTableHead, CTableHeaderCell, CTableRow, CToast, CToastBody, CToastClose, CToastHeader, CToaster, CTooltip, CWidgetStatsA, CWidgetStatsB, CWidgetStatsC, CWidgetStatsD, CWidgetStatsE, CWidgetStatsF */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(294);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(935);\n\n\n\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nfunction __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\n\nvar propTypes = {exports: {}};\n\nvar reactIs = {exports: {}};\n\nvar reactIs_production_min = {};\n\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;\nreactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return \"object\"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};\nreactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};\nreactIs_production_min.isValidElementType=function(a){return \"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;\n\nvar reactIs_development = {};\n\n/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (false) {}\n\nif (true) {\n  reactIs.exports = reactIs_production_min;\n} else {}\n\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret$3 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nvar ReactPropTypesSecret_1 = ReactPropTypesSecret$3;\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar printWarning$2 = function() {};\n\nif (false) { var has$1, loggedTypeFailures, ReactPropTypesSecret$2; }\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {\n  if (false) { var stack, err, error, typeSpecName; }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes$1.resetWarningCache = function() {\n  if (false) {}\n};\n\nvar checkPropTypes_1 = (/* unused pure expression or super */ null && (checkPropTypes$1));\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactIs$1 = reactIs.exports;\nvar assign = (/* unused pure expression or super */ null && (objectAssign));\n\nvar ReactPropTypesSecret$1 = (/* unused pure expression or super */ null && (ReactPropTypesSecret_1));\nvar checkPropTypes = (/* unused pure expression or super */ null && (checkPropTypes_1));\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning$1 = function() {};\n\nif (false) {}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nvar factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (false) { var manualPropTypeWarningCount, manualPropTypeCallCache; }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret$1) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (false) { var cacheKey; }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret$1);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs$1.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (false) {}\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n       false ? 0 : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning$1(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret$1) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret$1);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ReactPropTypesSecret = ReactPropTypesSecret_1;\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nvar factoryWithThrowingShims = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  }  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  }  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (false) { var throwOnDirectAccess, ReactIs; } else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  propTypes.exports = factoryWithThrowingShims();\n}\n\nvar PropTypes = propTypes.exports;\n\nvar classnames = {exports: {}};\n\n/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n(function (module) {\n/* global define */\n\n(function () {\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n}(classnames));\n\nvar classNames = classnames.exports;\n\nvar CAccordionContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CAccordion = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.activeItemKey, activeItemKey = _b === void 0 ? undefined : _b, _c = _a.alwaysOpen, alwaysOpen = _c === void 0 ? false : _c, className = _a.className, flush = _a.flush, rest = __rest(_a, [\"children\", \"activeItemKey\", \"alwaysOpen\", \"className\", \"flush\"]);\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(activeItemKey), _activeItemKey = _d[0], setActiveKey = _d[1];\n    var _className = classNames('accordion', { 'accordion-flush': flush }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CAccordionContext.Provider, { value: { _activeItemKey: _activeItemKey, alwaysOpen: alwaysOpen, setActiveKey: setActiveKey } }, children)));\n});\nCAccordion.propTypes = {\n    alwaysOpen: PropTypes.bool,\n    activeItemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    flush: PropTypes.bool,\n};\nCAccordion.displayName = 'CAccordion';\n\nvar CAccordionItemContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CAccordionItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, itemKey = _a.itemKey, rest = __rest(_a, [\"children\", \"className\", \"itemKey\"]);\n    var _itemKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(itemKey ? itemKey : Math.random().toString(36).substr(2, 9));\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CAccordionContext), _activeItemKey = _b._activeItemKey, alwaysOpen = _b.alwaysOpen, setActiveKey = _b.setActiveKey;\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(_activeItemKey === _itemKey.current)), visible = _c[0], setVisible = _c[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        !alwaysOpen && visible && setActiveKey(_itemKey.current);\n    }, [visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(Boolean(_activeItemKey === _itemKey.current));\n    }, [_activeItemKey]);\n    var _className = classNames('accordion-item', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CAccordionItemContext.Provider, { value: { setVisible: setVisible, visible: visible } }, children)));\n});\nCAccordionItem.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    itemKey: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n};\nCAccordionItem.displayName = 'CAccordionItem';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  _setPrototypeOf(subClass, superClass);\n}\n\n/**\n * Checks if a given element has a CSS class.\n * \n * @param element the element\n * @param className the CSS class name\n */\nfunction hasClass(element, className) {\n  if (element.classList) return !!className && element.classList.contains(className);\n  return (\" \" + (element.className.baseVal || element.className) + \" \").indexOf(\" \" + className + \" \") !== -1;\n}\n\n/**\n * Adds a CSS class to a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\nfunction addClass(element, className) {\n  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + \" \" + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + \" \" + className);\n}\n\nfunction replaceClassName(origClass, classToRemove) {\n  return origClass.replace(new RegExp(\"(^|\\\\s)\" + classToRemove + \"(?:\\\\s|$)\", 'g'), '$1').replace(/\\s+/g, ' ').replace(/^\\s*|\\s*$/g, '');\n}\n/**\n * Removes a CSS class from a given element.\n * \n * @param element the element\n * @param className the CSS class name\n */\n\n\nfunction removeClass$1(element, className) {\n  if (element.classList) {\n    element.classList.remove(className);\n  } else if (typeof element.className === 'string') {\n    element.className = replaceClassName(element.className, className);\n  } else {\n    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));\n  }\n}\n\nvar config = {\n  disabled: false\n};\n\nvar timeoutsShape =  false ? 0 : null;\nvar classNamesShape =  false ? 0 : null;\n\nvar TransitionGroupContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\n\nvar UNMOUNTED = 'unmounted';\nvar EXITED = 'exited';\nvar ENTERING = 'entering';\nvar ENTERED = 'entered';\nvar EXITING = 'exiting';\n/**\n * The Transition component lets you describe a transition from one component\n * state to another _over time_ with a simple declarative API. Most commonly\n * it's used to animate the mounting and unmounting of a component, but can also\n * be used to describe in-place transition states as well.\n *\n * ---\n *\n * **Note**: `Transition` is a platform-agnostic base component. If you're using\n * transitions in CSS, you'll probably want to use\n * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)\n * instead. It inherits all the features of `Transition`, but contains\n * additional features necessary to play nice with CSS transitions (hence the\n * name of the component).\n *\n * ---\n *\n * By default the `Transition` component does not alter the behavior of the\n * component it renders, it only tracks \"enter\" and \"exit\" states for the\n * components. It's up to you to give meaning and effect to those states. For\n * example we can add styles to a component when it enters or exits:\n *\n * ```jsx\n * import { Transition } from 'react-transition-group';\n *\n * const duration = 300;\n *\n * const defaultStyle = {\n *   transition: `opacity ${duration}ms ease-in-out`,\n *   opacity: 0,\n * }\n *\n * const transitionStyles = {\n *   entering: { opacity: 1 },\n *   entered:  { opacity: 1 },\n *   exiting:  { opacity: 0 },\n *   exited:  { opacity: 0 },\n * };\n *\n * const Fade = ({ in: inProp }) => (\n *   <Transition in={inProp} timeout={duration}>\n *     {state => (\n *       <div style={{\n *         ...defaultStyle,\n *         ...transitionStyles[state]\n *       }}>\n *         I'm a fade Transition!\n *       </div>\n *     )}\n *   </Transition>\n * );\n * ```\n *\n * There are 4 main states a Transition can be in:\n *  - `'entering'`\n *  - `'entered'`\n *  - `'exiting'`\n *  - `'exited'`\n *\n * Transition state is toggled via the `in` prop. When `true` the component\n * begins the \"Enter\" stage. During this stage, the component will shift from\n * its current transition state, to `'entering'` for the duration of the\n * transition and then to the `'entered'` stage once it's complete. Let's take\n * the following example (we'll use the\n * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <Transition in={inProp} timeout={500}>\n *         {state => (\n *           // ...\n *         )}\n *       </Transition>\n *       <button onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the button is clicked the component will shift to the `'entering'` state\n * and stay there for 500ms (the value of `timeout`) before it finally switches\n * to `'entered'`.\n *\n * When `in` is `false` the same thing happens except the state moves from\n * `'exiting'` to `'exited'`.\n */\n\nvar Transition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(Transition, _React$Component);\n\n  function Transition(props, context) {\n    var _this;\n\n    _this = _React$Component.call(this, props, context) || this;\n    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears\n\n    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;\n    var initialStatus;\n    _this.appearStatus = null;\n\n    if (props.in) {\n      if (appear) {\n        initialStatus = EXITED;\n        _this.appearStatus = ENTERING;\n      } else {\n        initialStatus = ENTERED;\n      }\n    } else {\n      if (props.unmountOnExit || props.mountOnEnter) {\n        initialStatus = UNMOUNTED;\n      } else {\n        initialStatus = EXITED;\n      }\n    }\n\n    _this.state = {\n      status: initialStatus\n    };\n    _this.nextCallback = null;\n    return _this;\n  }\n\n  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {\n    var nextIn = _ref.in;\n\n    if (nextIn && prevState.status === UNMOUNTED) {\n      return {\n        status: EXITED\n      };\n    }\n\n    return null;\n  } // getSnapshotBeforeUpdate(prevProps) {\n  //   let nextStatus = null\n  //   if (prevProps !== this.props) {\n  //     const { status } = this.state\n  //     if (this.props.in) {\n  //       if (status !== ENTERING && status !== ENTERED) {\n  //         nextStatus = ENTERING\n  //       }\n  //     } else {\n  //       if (status === ENTERING || status === ENTERED) {\n  //         nextStatus = EXITING\n  //       }\n  //     }\n  //   }\n  //   return { nextStatus }\n  // }\n  ;\n\n  var _proto = Transition.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.updateStatus(true, this.appearStatus);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var nextStatus = null;\n\n    if (prevProps !== this.props) {\n      var status = this.state.status;\n\n      if (this.props.in) {\n        if (status !== ENTERING && status !== ENTERED) {\n          nextStatus = ENTERING;\n        }\n      } else {\n        if (status === ENTERING || status === ENTERED) {\n          nextStatus = EXITING;\n        }\n      }\n    }\n\n    this.updateStatus(false, nextStatus);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.cancelNextCallback();\n  };\n\n  _proto.getTimeouts = function getTimeouts() {\n    var timeout = this.props.timeout;\n    var exit, enter, appear;\n    exit = enter = appear = timeout;\n\n    if (timeout != null && typeof timeout !== 'number') {\n      exit = timeout.exit;\n      enter = timeout.enter; // TODO: remove fallback for next major\n\n      appear = timeout.appear !== undefined ? timeout.appear : enter;\n    }\n\n    return {\n      exit: exit,\n      enter: enter,\n      appear: appear\n    };\n  };\n\n  _proto.updateStatus = function updateStatus(mounting, nextStatus) {\n    if (mounting === void 0) {\n      mounting = false;\n    }\n\n    if (nextStatus !== null) {\n      // nextStatus will always be ENTERING or EXITING.\n      this.cancelNextCallback();\n\n      if (nextStatus === ENTERING) {\n        this.performEnter(mounting);\n      } else {\n        this.performExit();\n      }\n    } else if (this.props.unmountOnExit && this.state.status === EXITED) {\n      this.setState({\n        status: UNMOUNTED\n      });\n    }\n  };\n\n  _proto.performEnter = function performEnter(mounting) {\n    var _this2 = this;\n\n    var enter = this.props.enter;\n    var appearing = this.context ? this.context.isMounting : mounting;\n\n    var _ref2 = this.props.nodeRef ? [appearing] : [react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode(this), appearing],\n        maybeNode = _ref2[0],\n        maybeAppearing = _ref2[1];\n\n    var timeouts = this.getTimeouts();\n    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED\n    // if we are mounting and running this it means appear _must_ be set\n\n    if (!mounting && !enter || config.disabled) {\n      this.safeSetState({\n        status: ENTERED\n      }, function () {\n        _this2.props.onEntered(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onEnter(maybeNode, maybeAppearing);\n    this.safeSetState({\n      status: ENTERING\n    }, function () {\n      _this2.props.onEntering(maybeNode, maybeAppearing);\n\n      _this2.onTransitionEnd(enterTimeout, function () {\n        _this2.safeSetState({\n          status: ENTERED\n        }, function () {\n          _this2.props.onEntered(maybeNode, maybeAppearing);\n        });\n      });\n    });\n  };\n\n  _proto.performExit = function performExit() {\n    var _this3 = this;\n\n    var exit = this.props.exit;\n    var timeouts = this.getTimeouts();\n    var maybeNode = this.props.nodeRef ? undefined : react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode(this); // no exit animation skip right to EXITED\n\n    if (!exit || config.disabled) {\n      this.safeSetState({\n        status: EXITED\n      }, function () {\n        _this3.props.onExited(maybeNode);\n      });\n      return;\n    }\n\n    this.props.onExit(maybeNode);\n    this.safeSetState({\n      status: EXITING\n    }, function () {\n      _this3.props.onExiting(maybeNode);\n\n      _this3.onTransitionEnd(timeouts.exit, function () {\n        _this3.safeSetState({\n          status: EXITED\n        }, function () {\n          _this3.props.onExited(maybeNode);\n        });\n      });\n    });\n  };\n\n  _proto.cancelNextCallback = function cancelNextCallback() {\n    if (this.nextCallback !== null) {\n      this.nextCallback.cancel();\n      this.nextCallback = null;\n    }\n  };\n\n  _proto.safeSetState = function safeSetState(nextState, callback) {\n    // This shouldn't be necessary, but there are weird race conditions with\n    // setState callbacks and unmounting in testing, so always make sure that\n    // we can cancel any pending setState callbacks after we unmount.\n    callback = this.setNextCallback(callback);\n    this.setState(nextState, callback);\n  };\n\n  _proto.setNextCallback = function setNextCallback(callback) {\n    var _this4 = this;\n\n    var active = true;\n\n    this.nextCallback = function (event) {\n      if (active) {\n        active = false;\n        _this4.nextCallback = null;\n        callback(event);\n      }\n    };\n\n    this.nextCallback.cancel = function () {\n      active = false;\n    };\n\n    return this.nextCallback;\n  };\n\n  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {\n    this.setNextCallback(handler);\n    var node = this.props.nodeRef ? this.props.nodeRef.current : react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode(this);\n    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;\n\n    if (!node || doesNotHaveTimeoutOrListener) {\n      setTimeout(this.nextCallback, 0);\n      return;\n    }\n\n    if (this.props.addEndListener) {\n      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],\n          maybeNode = _ref3[0],\n          maybeNextCallback = _ref3[1];\n\n      this.props.addEndListener(maybeNode, maybeNextCallback);\n    }\n\n    if (timeout != null) {\n      setTimeout(this.nextCallback, timeout);\n    }\n  };\n\n  _proto.render = function render() {\n    var status = this.state.status;\n\n    if (status === UNMOUNTED) {\n      return null;\n    }\n\n    var _this$props = this.props,\n        children = _this$props.children;\n        _this$props.in;\n        _this$props.mountOnEnter;\n        _this$props.unmountOnExit;\n        _this$props.appear;\n        _this$props.enter;\n        _this$props.exit;\n        _this$props.timeout;\n        _this$props.addEndListener;\n        _this$props.onEnter;\n        _this$props.onEntering;\n        _this$props.onEntered;\n        _this$props.onExit;\n        _this$props.onExiting;\n        _this$props.onExited;\n        _this$props.nodeRef;\n        var childProps = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"in\", \"mountOnEnter\", \"unmountOnExit\", \"appear\", \"enter\", \"exit\", \"timeout\", \"addEndListener\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"nodeRef\"]);\n\n    return (\n      /*#__PURE__*/\n      // allows for nested Transitions\n      react__WEBPACK_IMPORTED_MODULE_0__.createElement(TransitionGroupContext.Provider, {\n        value: null\n      }, typeof children === 'function' ? children(status, childProps) : react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children), childProps))\n    );\n  };\n\n  return Transition;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\nTransition.contextType = TransitionGroupContext;\nTransition.propTypes =  false ? 0 : {}; // Name the function so it is clearer in the documentation\n\nfunction noop() {}\n\nTransition.defaultProps = {\n  in: false,\n  mountOnEnter: false,\n  unmountOnExit: false,\n  appear: false,\n  enter: true,\n  exit: true,\n  onEnter: noop,\n  onEntering: noop,\n  onEntered: noop,\n  onExit: noop,\n  onExiting: noop,\n  onExited: noop\n};\nTransition.UNMOUNTED = UNMOUNTED;\nTransition.EXITED = EXITED;\nTransition.ENTERING = ENTERING;\nTransition.ENTERED = ENTERED;\nTransition.EXITING = EXITING;\nvar Transition$1 = Transition;\n\nvar _addClass = function addClass$1(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeClass$1(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props;\n        _this$props.classNames;\n        var props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes =  false ? 0 : {};\nvar CSSTransition$1 = CSSTransition;\n\n// code borrowed from https://github.com/reach/reach-ui\nfunction useForkedRef() {\n    var refs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        refs[_i] = arguments[_i];\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(function () {\n        if (refs.every(function (ref) { return ref == null; })) {\n            return null;\n        }\n        return function (node) {\n            refs.forEach(function (ref) {\n                assignRef(ref, node);\n            });\n        };\n    }, refs);\n}\nfunction assignRef(ref, value) {\n    if (ref == null)\n        return;\n    if (isFunction(ref)) {\n        ref(value);\n    }\n    else {\n        try {\n            ref.current = value;\n        }\n        catch (error) {\n            throw new Error(\"Cannot assign value \\\"\" + value + \"\\\" to ref \\\"\" + ref + \"\\\"\");\n        }\n    }\n}\nfunction isFunction(value) {\n    return !!(value && {}.toString.call(value) == '[object Function]');\n}\n\nvar CCollapse = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, onHide = _a.onHide, onShow = _a.onShow, visible = _a.visible, rest = __rest(_a, [\"children\", \"className\", \"onHide\", \"onShow\", \"visible\"]);\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), height = _b[0], setHeight = _b[1];\n    var collapseRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, collapseRef);\n    var getTransitionClass = function (state) {\n        return state === 'entering'\n            ? 'collapsing'\n            : state === 'entered'\n                ? 'collapse show'\n                : state === 'exiting'\n                    ? 'collapsing'\n                    : 'collapse';\n    };\n    var onEntering = function () {\n        onShow && onShow();\n        collapseRef.current && setHeight(collapseRef.current.scrollHeight);\n    };\n    var onEntered = function () {\n        setHeight(0);\n    };\n    var onExit = function () {\n        collapseRef.current && setHeight(collapseRef.current.scrollHeight);\n    };\n    var onExiting = function () {\n        onHide && onHide();\n        setHeight(0);\n    };\n    var onExited = function () {\n        setHeight(0);\n    };\n    var _className = classNames(className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CSSTransition$1, { in: visible, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: 350 }, function (state) {\n        var transitionClass = getTransitionClass(state);\n        var currentHeight = height === 0 ? null : { height: height };\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(_className, transitionClass), style: __assign({}, currentHeight) }, rest, { ref: forkedRef }), children));\n    }));\n});\nCCollapse.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    visible: PropTypes.bool,\n};\nCCollapse.displayName = 'CCollapse';\n\nvar CAccordionBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var visible = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CAccordionItemContext).visible;\n    var _className = classNames('accordion-body', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCollapse, { className: \"accordion-collpase\", visible: visible },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children)));\n});\nCAccordionBody.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCAccordionBody.displayName = 'CAccordionBody';\n\nvar CAccordionButton = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CAccordionItemContext), visible = _b.visible, setVisible = _b.setVisible;\n    var _className = classNames('accordion-button', { collapsed: !visible }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __assign({ className: _className }, rest, { \"aria-expanded\": !visible, onClick: function () { return setVisible(!visible); }, ref: ref }), children));\n});\nCAccordionButton.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCAccordionButton.displayName = 'CAccordionButton';\n\nvar CAccordionCollapse = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, props = __rest(_a, [\"children\"]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCollapse, __assign({ className: \"accordion-collapse\" }, props, { ref: ref }), children));\n});\nCAccordionCollapse.propTypes = {\n    children: PropTypes.node,\n};\nCAccordionCollapse.displayName = 'CAccordionCollapse';\n\nvar CAccordionHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('accordion-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CAccordionButton, null, children)));\n});\nCAccordionHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCAccordionHeader.displayName = 'CAccordionHeader';\n\nvar colorPropType = PropTypes.oneOfType([\n    PropTypes.oneOf([\n        'primary',\n        'secondary',\n        'success',\n        'danger',\n        'warning',\n        'info',\n        'dark',\n        'light',\n    ]),\n    PropTypes.string,\n]);\nvar placementPropType = PropTypes.oneOf([\n    'auto',\n    'auto-start',\n    'auto-end',\n    'top-end',\n    'top',\n    'top-start',\n    'bottom-end',\n    'bottom',\n    'bottom-start',\n    'right-start',\n    'right',\n    'right-end',\n    'left-start',\n    'left',\n    'left-end',\n]);\nvar shapePropType = PropTypes.oneOfType([\n    PropTypes.oneOf([\n        'rounded',\n        'rounded-top',\n        'rounded-end',\n        'rounded-bottom',\n        'rounded-start',\n        'rounded-circle',\n        'rounded-pill',\n        'rounded-0',\n        'rounded-1',\n        'rounded-2',\n        'rounded-3',\n    ]),\n    PropTypes.string,\n]);\nvar textColorsPropType = PropTypes.oneOfType([\n    colorPropType,\n    PropTypes.oneOf(['white', 'muted']),\n    PropTypes.string,\n]);\nvar triggerPropType = PropTypes.oneOf(['hover', 'focus', 'click']);\n\nvar CCloseButton = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, disabled = _a.disabled, white = _a.white, rest = __rest(_a, [\"className\", \"disabled\", \"white\"]);\n    var _className = classNames('btn', 'btn-close', {\n        'btn-close-white': white,\n    }, disabled, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __assign({ className: _className, \"aria-label\": \"Close\", disabled: disabled }, rest, { ref: ref })));\n});\nCCloseButton.propTypes = {\n    className: PropTypes.string,\n    disabled: PropTypes.bool,\n    white: PropTypes.bool,\n};\nCCloseButton.displayName = 'CCloseButton';\n\nvar CAlert = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.color, color = _b === void 0 ? 'primary' : _b, dismissible = _a.dismissible, variant = _a.variant, _c = _a.visible, visible = _c === void 0 ? true : _c, onClose = _a.onClose, rest = __rest(_a, [\"children\", \"className\", \"color\", \"dismissible\", \"variant\", \"visible\", \"onClose\"]);\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _d[0], setVisible = _d[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(visible);\n    }, [visible]);\n    var _className = classNames('alert', variant === 'solid' ? \"bg-\" + color + \" text-white\" : \"alert-\" + color, {\n        'alert-dismissible fade': dismissible,\n    }, className);\n    var getTransitionClass = function (state) {\n        return state === 'entered' && 'show';\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, mountOnEnter: true, onExit: onClose, timeout: 150, unmountOnExit: true }, function (state) {\n        var transitionClass = getTransitionClass(state);\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(_className, transitionClass), role: \"alert\" }, rest, { ref: ref }),\n            children,\n            dismissible && react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCloseButton, { onClick: function () { return setVisible(false); } })));\n    }));\n});\nCAlert.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType.isRequired,\n    dismissible: PropTypes.bool,\n    onClose: PropTypes.func,\n    variant: PropTypes.string,\n    visible: PropTypes.bool,\n};\nCAlert.displayName = 'CAlert';\n\nvar CAlertHeading = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'h4' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('alert-heading', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCAlertHeading.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCAlertHeading.displayName = 'CAlertHeading';\n\nvar CLink = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, active = _a.active, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'a' : _b, disabled = _a.disabled, rest = __rest(_a, [\"children\", \"active\", \"className\", \"component\", \"disabled\"]);\n    // TODO: remove duplicated classes ex. `active active` in `<CListGroupItem>`\n    var _className = classNames(className, { active: active, disabled: disabled });\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, (active && { 'aria-current': 'page' }), (Component === 'a' && disabled && { 'aria-disabled': true, tabIndex: -1 }), ((Component === 'a' || Component === 'button') && {\n        onClick: function (event) {\n            event.preventDefault;\n            !disabled && rest.onClick && rest.onClick(event);\n        },\n    }), { disabled: disabled }, rest, { ref: ref }), children));\n});\nCLink.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disabled: PropTypes.bool,\n};\nCLink.displayName = 'CLink';\n\nvar CAlertLink = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('alert-link', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCAlertLink.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCAlertLink.displayName = 'CAlertLink';\n\nvar CAvatar = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, shape = _a.shape, size = _a.size, src = _a.src, status = _a.status, textColor = _a.textColor, rest = __rest(_a, [\"children\", \"className\", \"color\", \"shape\", \"size\", \"src\", \"status\", \"textColor\"]);\n    var _className = classNames('avatar', (_b = {},\n        _b[\"bg-\" + color] = color,\n        _b[\"avatar-\" + size] = size,\n        _b[\"text-\" + textColor] = textColor,\n        _b), shape, className);\n    var statusClassName = status && classNames('avatar-status', \"bg-\" + status);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n        src ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", { src: src, className: \"avatar-img\" }) : children,\n        status && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: statusClassName })));\n});\nCAvatar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    shape: shapePropType,\n    size: PropTypes.string,\n    src: PropTypes.string,\n    status: PropTypes.string,\n    textColor: textColorsPropType,\n};\nCAvatar.displayName = 'CAvatar';\n\nvar CBadge = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, _c = _a.component, Component = _c === void 0 ? 'span' : _c, position = _a.position, shape = _a.shape, size = _a.size, textColor = _a.textColor, rest = __rest(_a, [\"children\", \"className\", \"color\", \"component\", \"position\", \"shape\", \"size\", \"textColor\"]);\n    var _className = classNames('badge', (_b = {},\n        _b[\"bg-\" + color] = color,\n        _b['position-absolute translate-middle'] = position,\n        _b['top-0'] = position === null || position === void 0 ? void 0 : position.includes('top'),\n        _b['top-100'] = position === null || position === void 0 ? void 0 : position.includes('bottom'),\n        _b['start-100'] = position === null || position === void 0 ? void 0 : position.includes('end'),\n        _b['start-0'] = position === null || position === void 0 ? void 0 : position.includes('start'),\n        _b[\"badge-\" + size] = size,\n        _b[\"text-\" + textColor] = textColor,\n        _b), shape, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCBadge.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    component: PropTypes.string,\n    position: PropTypes.oneOf(['top-start', 'top-end', 'bottom-end', 'bottom-start']),\n    shape: shapePropType,\n    size: PropTypes.oneOf(['sm']),\n    textColor: textColorsPropType,\n};\nCBadge.displayName = 'CBadge';\n\nvar CBackdrop = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b = _a.className, className = _b === void 0 ? 'modal-backdrop' : _b, visible = _a.visible, rest = __rest(_a, [\"className\", \"visible\"]);\n    var _className = classNames(className, 'fade');\n    var getTransitionClass = function (state) {\n        return state === 'entered' && 'show';\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: visible, mountOnEnter: true, timeout: 150, unmountOnExit: true }, function (state) {\n        var transitionClass = getTransitionClass(state);\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(_className, transitionClass) }, rest, { ref: ref }));\n    }));\n});\nCBackdrop.propTypes = {\n    className: PropTypes.string,\n    visible: PropTypes.bool,\n};\nCBackdrop.displayName = 'CBackdrop';\n\nvar CBreadcrumb = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('breadcrumb', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"nav\", { \"aria-label\": \"breadcrumb\" },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ol\", __assign({ className: _className }, rest, { ref: ref }), children)));\n});\nCBreadcrumb.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCBreadcrumb.displayName = 'CBreadcrumb';\n\nvar CBreadcrumbItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, active = _a.active, className = _a.className, href = _a.href, rest = __rest(_a, [\"children\", \"active\", \"className\", \"href\"]);\n    var _className = classNames('breadcrumb-item', {\n        active: active,\n    }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", __assign({ className: _className }, (active && { 'aria-current': 'page' }), rest, { ref: ref }), href ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, { href: href }, children) : children));\n});\nCBreadcrumbItem.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    href: PropTypes.string,\n};\nCBreadcrumbItem.displayName = 'CBreadcrumbItem';\n\nvar CButton = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, _c = _a.color, color = _c === void 0 ? 'primary' : _c, _d = _a.component, component = _d === void 0 ? 'button' : _d, shape = _a.shape, size = _a.size, _e = _a.type, type = _e === void 0 ? 'button' : _e, variant = _a.variant, rest = __rest(_a, [\"children\", \"className\", \"color\", \"component\", \"shape\", \"size\", \"type\", \"variant\"]);\n    var _className = classNames('btn', variant ? \"btn-\" + variant + \"-\" + color : \"btn-\" + color, (_b = {}, _b[\"btn-\" + size] = size, _b), shape, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, __assign({ component: rest.href ? 'a' : component, type: type, className: _className }, rest, { ref: ref }), children));\n});\nCButton.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    component: PropTypes.elementType,\n    shape: PropTypes.string,\n    size: PropTypes.oneOf(['sm', 'lg']),\n    type: PropTypes.oneOf(['button', 'submit', 'reset']),\n    variant: PropTypes.oneOf(['outline', 'ghost']),\n};\nCButton.displayName = 'CButton';\n\nvar CButtonGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, size = _a.size, vertical = _a.vertical, rest = __rest(_a, [\"children\", \"className\", \"size\", \"vertical\"]);\n    var _className = classNames(vertical ? 'btn-group-vertical' : 'btn-group', (_b = {}, _b[\"btn-group-\" + size] = size, _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCButtonGroup.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    size: PropTypes.oneOf(['sm', 'lg']),\n    vertical: PropTypes.bool,\n};\nCButtonGroup.displayName = 'CButtonGroup';\n\nvar CButtonToolbar = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('btn-toolbar', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCButtonToolbar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCButtonToolbar.displayName = 'CButtonToolbar';\n\nvar CCallout = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"className\", \"color\"]);\n    var _className = classNames('callout', (_b = {},\n        _b[\"callout-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCallout.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCCallout.displayName = 'CCallout';\n\nvar CCard = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, textColor = _a.textColor, rest = __rest(_a, [\"children\", \"className\", \"color\", \"textColor\"]);\n    var _className = classNames('card', (_b = {},\n        _b[\"bg-\" + color] = color,\n        _b[\"text-\" + textColor] = textColor,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCard.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    textColor: PropTypes.string,\n};\nCCard.displayName = 'CCard';\n\nvar CCardBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('card-body', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardBody.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCCardBody.displayName = 'CCardBody';\n\nvar CCardFooter = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('card-footer', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardFooter.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCCardFooter.displayName = 'CCardFooter';\n\nvar CCardGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('card-group', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardGroup.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCCardGroup.displayName = 'CCardGroup';\n\nvar CCardHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'div' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('card-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCCardHeader.displayName = 'CCardHeader';\n\nvar CCardImage = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'img' : _b, orientation = _a.orientation, rest = __rest(_a, [\"children\", \"className\", \"component\", \"orientation\"]);\n    var _className = classNames(orientation ? \"card-img-\" + orientation : 'card-img', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardImage.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    orientation: PropTypes.oneOf(['top', 'bottom']),\n};\nCCardImage.displayName = 'CCardImage';\n\nvar CCardImageOverlay = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('card-img-overlay', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardImageOverlay.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCCardImageOverlay.displayName = 'CCardImageOverlay';\n\nvar CCardLink = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('card-link', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardLink.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCCardLink.displayName = 'CCardLink';\n\nvar CCardSubtitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'h6' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('card-subtitle', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardSubtitle.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCCardSubtitle.displayName = 'CCardSubtitle';\n\nvar CCardText = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'p' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('card-text', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardText.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCCardText.displayName = 'CCardText';\n\nvar CCardTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'h5' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('card-title', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCCardTitle.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCCardTitle.displayName = 'CCardTitle';\n\nvar isVisible$1 = function (element) {\n    var rect = element.getBoundingClientRect();\n    return (rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n};\nvar CCarouselContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CCarousel = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.activeIndex, activeIndex = _b === void 0 ? 0 : _b, className = _a.className, controls = _a.controls, dark = _a.dark, indicators = _a.indicators, _c = _a.interval, interval = _c === void 0 ? 5000 : _c, onSlid = _a.onSlid, onSlide = _a.onSlide, _d = _a.pause, pause = _d === void 0 ? 'hover' : _d, transition = _a.transition, _e = _a.wrap, wrap = _e === void 0 ? true : _e, rest = __rest(_a, [\"children\", \"activeIndex\", \"className\", \"controls\", \"dark\", \"indicators\", \"interval\", \"onSlid\", \"onSlide\", \"pause\", \"transition\", \"wrap\"]);\n    var carouselRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, carouselRef);\n    var data = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({}).current;\n    var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(activeIndex), active = _f[0], setActive = _f[1];\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), animating = _g[0], setAnimating = _g[1];\n    var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), customInterval = _h[0], setCustomInterval = _h[1];\n    var _j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)('next'), direction = _j[0], setDirection = _j[1];\n    var _k = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), itemsNumber = _k[0], setItemsNumber = _k[1];\n    var _l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), visible = _l[0], setVisible = _l[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setItemsNumber(react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children).length);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        visible && cycle();\n    }, [visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        !animating && cycle();\n        !animating && onSlid && onSlid(active, direction);\n        animating && onSlide && onSlide(active, direction);\n    }, [animating]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        window.addEventListener('scroll', handleScroll);\n        return function () {\n            window.removeEventListener('scroll', handleScroll);\n        };\n    });\n    var _className = classNames('carousel slide', transition === 'crossfade' && 'carousel-fade', dark && 'carousel-dark', className);\n    var cycle = function () {\n        _pause();\n        if (!wrap && active === itemsNumber - 1) {\n            return;\n        }\n        if (typeof interval === 'number') {\n            data.timeout = setTimeout(function () { return nextItemWhenVisible(); }, typeof customInterval === 'number' ? customInterval : interval);\n        }\n    };\n    var _pause = function () { return pause && data.timeout && clearTimeout(data.timeout); };\n    var nextItemWhenVisible = function () {\n        // Don't call next when the page isn't visible\n        // or the carousel or its parent isn't visible\n        if (!document.hidden && carouselRef.current && isVisible$1(carouselRef.current)) {\n            if (animating) {\n                return;\n            }\n            handleControlClick('next');\n        }\n    };\n    var handleControlClick = function (direction) {\n        if (animating) {\n            return;\n        }\n        setDirection(direction);\n        if (direction === 'next') {\n            active === itemsNumber - 1 ? setActive(0) : setActive(active + 1);\n        }\n        else {\n            active === 0 ? setActive(itemsNumber - 1) : setActive(active - 1);\n        }\n    };\n    var handleIndicatorClick = function (index) {\n        if (active === index) {\n            return;\n        }\n        if (active < index) {\n            setDirection('next');\n            setActive(index);\n            return;\n        }\n        if (active > index) {\n            setDirection('prev');\n            setActive(index);\n        }\n    };\n    var handleScroll = function () {\n        if (!document.hidden && carouselRef.current && isVisible$1(carouselRef.current)) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, onMouseEnter: _pause, onMouseLeave: cycle }, rest, { ref: forkedRef }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCarouselContext.Provider, { value: {\n                setAnimating: setAnimating,\n                setCustomInterval: setCustomInterval,\n            } },\n            indicators && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ol\", { className: \"carousel-indicators\" }, Array.from({ length: itemsNumber }, function (_, i) { return i; }).map(function (index) {\n                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", { key: \"indicator\" + index, onClick: function () {\n                        !animating && handleIndicatorClick(index);\n                    }, className: active === index ? 'active' : '', \"data-coreui-target\": \"\" }));\n            }))),\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"carousel-inner\" }, react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child, index) {\n                if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child)) {\n                    return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {\n                        active: active === index ? true : false,\n                        direction: direction,\n                        key: index,\n                    });\n                }\n                return;\n            })),\n            controls && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"carousel-control-prev\", onClick: function () { return handleControlClick('prev'); } },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"carousel-control-prev-icon\", \"aria-label\": \"prev\" })),\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", { className: \"carousel-control-next\", onClick: function () { return handleControlClick('next'); } },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"carousel-control-next-icon\", \"aria-label\": \"next\" })))))));\n});\nCCarousel.propTypes = {\n    activeIndex: PropTypes.number,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    controls: PropTypes.bool,\n    dark: PropTypes.bool,\n    indicators: PropTypes.bool,\n    interval: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n    onSlid: PropTypes.func,\n    onSlide: PropTypes.func,\n    pause: PropTypes.oneOf([false, 'hover']),\n    transition: PropTypes.oneOf(['slide', 'crossfade']),\n    wrap: PropTypes.bool,\n};\nCCarousel.displayName = 'CCarousel';\n\nvar CCarouselCaption = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, rest = __rest(_a, [\"className\"]);\n    var _className = classNames('carousel-caption', className);\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }));\n});\nCCarouselCaption.propTypes = {\n    className: PropTypes.string,\n};\nCCarouselCaption.displayName = 'CCarouselCaption';\n\nvar CCarouselItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, active = _a.active, direction = _a.direction, _b = _a.interval, interval = _b === void 0 ? false : _b, rest = __rest(_a, [\"children\", \"className\", \"active\", \"direction\", \"interval\"]);\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CCarouselContext), setAnimating = _c.setAnimating, setCustomInterval = _c.setCustomInterval;\n    var carouselItemRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, carouselItemRef);\n    var prevActive = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), directionClassName = _d[0], setDirectionClassName = _d[1];\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), orderClassName = _e[0], setOrderClassName = _e[1];\n    var _f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(active && 'active'), activeClassName = _f[0], setActiveClassName = _f[1];\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), count = _g[0], setCount = _g[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        if (active) {\n            setCustomInterval(interval);\n            if (count !== 0)\n                setOrderClassName(\"carousel-item-\" + direction);\n        }\n        if (prevActive.current && !active) {\n            setActiveClassName('active');\n        }\n        if (active || prevActive.current) {\n            setTimeout(function () {\n                var _a;\n                if (count !== 0) {\n                    // @ts-expect-error reflow is necessary to proper transition\n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    (_a = carouselItemRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;\n                    setDirectionClassName(\"carousel-item-\" + (direction === 'next' ? 'start' : 'end'));\n                }\n            }, 0);\n        }\n        prevActive.current = active;\n        if (count === 0)\n            setCount(count + 1);\n    }, [active]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        var _a, _b;\n        (_a = carouselItemRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('transitionstart', function () {\n            active && setAnimating(true);\n        });\n        (_b = carouselItemRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener('transitionend', function () {\n            active && setAnimating(false);\n            setDirectionClassName('');\n            setOrderClassName('');\n            if (active) {\n                setActiveClassName('active');\n            }\n            if (!active) {\n                setActiveClassName('');\n            }\n        });\n        return function () {\n            var _a, _b;\n            (_a = carouselItemRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionstart', function () {\n                active && setAnimating(true);\n            });\n            (_b = carouselItemRef.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('transitionend', function () {\n                active && setAnimating(false);\n                setDirectionClassName('');\n                setOrderClassName('');\n                if (active) {\n                    setActiveClassName('active');\n                }\n                if (!active) {\n                    setActiveClassName('');\n                }\n            });\n        };\n    });\n    var _className = classNames('carousel-item', activeClassName, directionClassName, orderClassName, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, ref: forkedRef }, rest), children));\n});\nCCarouselItem.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    direction: PropTypes.string,\n    interval: PropTypes.oneOfType([PropTypes.bool, PropTypes.number]),\n};\nCCarouselItem.displayName = 'CCarouselItem';\n\nvar ManagerReferenceNodeContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext();\nvar ManagerReferenceNodeSetterContext = react__WEBPACK_IMPORTED_MODULE_0__.createContext();\nfunction Manager(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(null),\n      referenceNode = _React$useState[0],\n      setReferenceNode = _React$useState[1];\n\n  var hasUnmounted = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    return function () {\n      hasUnmounted.current = true;\n    };\n  }, []);\n  var handleSetReferenceNode = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (node) {\n    if (!hasUnmounted.current) {\n      setReferenceNode(node);\n    }\n  }, []);\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ManagerReferenceNodeContext.Provider, {\n    value: referenceNode\n  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(ManagerReferenceNodeSetterContext.Provider, {\n    value: handleSetReferenceNode\n  }, children));\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array,\n * otherwise returns the argument. Used for Preact compatibility.\n */\nvar unwrapArray = function unwrapArray(arg) {\n  return Array.isArray(arg) ? arg[0] : arg;\n};\n/**\n * Takes a maybe-undefined function and arbitrary args and invokes the function\n * only if it is defined.\n */\n\nvar safeInvoke = function safeInvoke(fn) {\n  if (typeof fn === 'function') {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return fn.apply(void 0, args);\n  }\n};\n/**\n * Sets a ref using either a ref callback or a ref object\n */\n\nvar setRef = function setRef(ref, node) {\n  // if its a function call it\n  if (typeof ref === 'function') {\n    return safeInvoke(ref, node);\n  } // otherwise we should treat it as a ref object\n  else if (ref != null) {\n      ref.current = node;\n    }\n};\n/**\n * Simple ponyfill for Object.fromEntries\n */\n\nvar fromEntries = function fromEntries(entries) {\n  return entries.reduce(function (acc, _ref) {\n    var key = _ref[0],\n        value = _ref[1];\n    acc[key] = value;\n    return acc;\n  }, {});\n};\n/**\n * Small wrapper around `useLayoutEffect` to get rid of the warning on SSR envs\n */\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && window.document && window.document.createElement ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\n\nvar top = 'top';\nvar bottom = 'bottom';\nvar right = 'right';\nvar left = 'left';\nvar auto = 'auto';\nvar basePlacements = [top, bottom, right, left];\nvar start = 'start';\nvar end = 'end';\nvar clippingParents = 'clippingParents';\nvar viewport = 'viewport';\nvar popper = 'popper';\nvar reference = 'reference';\nvar variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nvar placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nvar beforeRead = 'beforeRead';\nvar read = 'read';\nvar afterRead = 'afterRead'; // pure-logic modifiers\n\nvar beforeMain = 'beforeMain';\nvar main = 'main';\nvar afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nvar beforeWrite = 'beforeWrite';\nvar write = 'write';\nvar afterWrite = 'afterWrite';\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n\nfunction getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}\n\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect$2(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar applyStyles$1 = {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect$2,\n  requires: ['computeStyles']\n};\n\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\n\n// import { isHTMLElement } from './instanceOf';\nfunction getBoundingClientRect(element, // eslint-disable-next-line unused-imports/no-unused-vars\nincludeScale) {\n\n  var rect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1; // FIXME:\n  // `offsetWidth` returns an integer while `getBoundingClientRect`\n  // returns a float. This results in `scaleX` or `scaleY` being\n  // non-1 when it should be for elements that aren't a full pixel in\n  // width or height.\n  // if (isHTMLElement(element) && includeScale) {\n  //   const offsetHeight = element.offsetHeight;\n  //   const offsetWidth = element.offsetWidth;\n  //   // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\n  //   // Fallback to 1 in case both values are `0`\n  //   if (offsetWidth > 0) {\n  //     scaleX = rect.width / offsetWidth || 1;\n  //   }\n  //   if (offsetHeight > 0) {\n  //     scaleY = rect.height / offsetHeight || 1;\n  //   }\n  // }\n\n  return {\n    width: rect.width / scaleX,\n    height: rect.height / scaleY,\n    top: rect.top / scaleY,\n    right: rect.right / scaleX,\n    bottom: rect.bottom / scaleY,\n    left: rect.left / scaleX,\n    x: rect.left / scaleX,\n    y: rect.top / scaleY\n  };\n}\n\n// means it doesn't take into account transforms.\n\nfunction getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}\n\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}\n\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}\n\nfunction getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}\n\nfunction getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') !== -1;\n  var isIE = navigator.userAgent.indexOf('Trident') !== -1;\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle$1(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}\n\nvar max = Math.max;\nvar min = Math.min;\nvar round = Math.round;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}\n\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}\n\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect$1(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (false) {}\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    if (false) {}\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar arrow$1 = {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect$1,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};\n\nfunction getVariation(placement) {\n  return placement.split('-')[1];\n}\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var win = window;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(round(x * dpr) / dpr) || 0,\n    y: round(round(y * dpr) / dpr) || 0\n  };\n}\n\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets;\n\n  var _ref3 = roundOffsets === true ? roundOffsetsByDPR(offsets) : typeof roundOffsets === 'function' ? roundOffsets(offsets) : offsets,\n      _ref3$x = _ref3.x,\n      x = _ref3$x === void 0 ? 0 : _ref3$x,\n      _ref3$y = _ref3.y,\n      y = _ref3$y === void 0 ? 0 : _ref3$y;\n\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom; // $FlowFixMe[prop-missing]\n\n      y -= offsetParent[heightProp] - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right; // $FlowFixMe[prop-missing]\n\n      x -= offsetParent[widthProp] - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref4) {\n  var state = _ref4.state,\n      options = _ref4.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n  if (false) { var transitionProperty; }\n\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar computeStyles$1 = {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar eventListeners = {\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n};\n\nvar hash$1 = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash$1[matched];\n  });\n}\n\nvar hash = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}\n\nfunction getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\n\nfunction getViewportRect(element) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0; // NB: This isn't supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn't open, so if this isn't available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: \"Not Safari\" userAgent\n\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}\n\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle$1(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}\n\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle$1(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\n\nfunction getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}\n\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}\n\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}\n\nfunction getInnerBoundingClientRect(element) {\n  var rect = getBoundingClientRect(element);\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : isHTMLElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingRect(element, boundary, rootBoundary) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n\nfunction computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n    }\n  }\n\n  return offsets;\n}\n\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements$1.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements$1;\n\n    if (false) {}\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar flip$1 = {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar hide$1 = {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};\n\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar offset$1 = {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar popperOffsets$1 = {\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n};\n\nfunction getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis || checkAltAxis) {\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min$1 = popperOffsets[mainAxis] + overflow[mainSide];\n    var max$1 = popperOffsets[mainAxis] - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - tetherOffsetValue : minLen - arrowLen - arrowPaddingMin - tetherOffsetValue;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + tetherOffsetValue : maxLen + arrowLen + arrowPaddingMax + tetherOffsetValue;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = state.modifiersData.offset ? state.modifiersData.offset[state.placement][mainAxis] : 0;\n    var tetherMin = popperOffsets[mainAxis] + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = popperOffsets[mainAxis] + maxOffset - offsetModifierValue;\n\n    if (checkMainAxis) {\n      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n      popperOffsets[mainAxis] = preventedOffset;\n      data[mainAxis] = preventedOffset - offset;\n    }\n\n    if (checkAltAxis) {\n      var _mainSide = mainAxis === 'x' ? top : left;\n\n      var _altSide = mainAxis === 'x' ? bottom : right;\n\n      var _offset = popperOffsets[altAxis];\n\n      var _min = _offset + overflow[_mainSide];\n\n      var _max = _offset - overflow[_altSide];\n\n      var _preventedOffset = within(tether ? min(_min, tetherMin) : _min, _offset, tether ? max(_max, tetherMax) : _max);\n\n      popperOffsets[altAxis] = _preventedOffset;\n      data[altAxis] = _preventedOffset - _offset;\n    }\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nvar preventOverflow$1 = {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};\n\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n\nfunction getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = rect.width / element.offsetWidth || 1;\n  var scaleY = rect.height / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nfunction orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}\n\nfunction debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}\n\nfunction format(str) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return [].concat(args).reduce(function (p, c) {\n    return p.replace(/%s/, c);\n  }, str);\n}\n\nvar INVALID_MODIFIER_ERROR = 'Popper: modifier \"%s\" provided an invalid %s property, expected %s but got %s';\nvar MISSING_DEPENDENCY_ERROR = 'Popper: modifier \"%s\" requires \"%s\", but \"%s\" modifier is not available';\nvar VALID_PROPERTIES = (/* unused pure expression or super */ null && (['name', 'enabled', 'phase', 'fn', 'effect', 'requires', 'options']));\nfunction validateModifiers(modifiers) {\n  modifiers.forEach(function (modifier) {\n    [].concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`\n    .filter(function (value, index, self) {\n      return self.indexOf(value) === index;\n    }).forEach(function (key) {\n      switch (key) {\n        case 'name':\n          if (typeof modifier.name !== 'string') {\n            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '\"name\"', '\"string\"', \"\\\"\" + String(modifier.name) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'enabled':\n          if (typeof modifier.enabled !== 'boolean') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"enabled\"', '\"boolean\"', \"\\\"\" + String(modifier.enabled) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'phase':\n          if (modifierPhases.indexOf(modifier.phase) < 0) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"phase\"', \"either \" + modifierPhases.join(', '), \"\\\"\" + String(modifier.phase) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'fn':\n          if (typeof modifier.fn !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"fn\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'effect':\n          if (modifier.effect != null && typeof modifier.effect !== 'function') {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"effect\"', '\"function\"', \"\\\"\" + String(modifier.fn) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requires':\n          if (modifier.requires != null && !Array.isArray(modifier.requires)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requires\"', '\"array\"', \"\\\"\" + String(modifier.requires) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'requiresIfExists':\n          if (!Array.isArray(modifier.requiresIfExists)) {\n            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '\"requiresIfExists\"', '\"array\"', \"\\\"\" + String(modifier.requiresIfExists) + \"\\\"\"));\n          }\n\n          break;\n\n        case 'options':\n        case 'data':\n          break;\n\n        default:\n          console.error(\"PopperJS: an invalid property has been provided to the \\\"\" + modifier.name + \"\\\" modifier, valid properties are \" + VALID_PROPERTIES.map(function (s) {\n            return \"\\\"\" + s + \"\\\"\";\n          }).join(', ') + \"; but \\\"\" + key + \"\\\" was provided.\");\n      }\n\n      modifier.requires && modifier.requires.forEach(function (requirement) {\n        if (modifiers.find(function (mod) {\n          return mod.name === requirement;\n        }) == null) {\n          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));\n        }\n      });\n    });\n  });\n}\n\nfunction uniqueBy(arr, fn) {\n  var identifiers = new Set();\n  return arr.filter(function (item) {\n    var identifier = fn(item);\n\n    if (!identifiers.has(identifier)) {\n      identifiers.add(identifier);\n      return true;\n    }\n  });\n}\n\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}\n\nvar INVALID_ELEMENT_ERROR = 'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.';\nvar INFINITE_LOOP_ERROR = 'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.';\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (false) { var _getComputedStyle, marginTop, marginRight, marginBottom, marginLeft, flipModifier, modifiers; }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (false) {}\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (false) {}\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (false) {}\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\n\nvar defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\n/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nvar reactFastCompare = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n\nvar EMPTY_MODIFIERS$1 = [];\nvar usePopper = function usePopper(referenceElement, popperElement, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var prevOptions = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n  var optionsWithDefaults = {\n    onFirstUpdate: options.onFirstUpdate,\n    placement: options.placement || 'bottom',\n    strategy: options.strategy || 'absolute',\n    modifiers: options.modifiers || EMPTY_MODIFIERS$1\n  };\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n    styles: {\n      popper: {\n        position: optionsWithDefaults.strategy,\n        left: '0',\n        top: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      }\n    },\n    attributes: {}\n  }),\n      state = _React$useState[0],\n      setState = _React$useState[1];\n\n  var updateStateModifier = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return {\n      name: 'updateState',\n      enabled: true,\n      phase: 'write',\n      fn: function fn(_ref) {\n        var state = _ref.state;\n        var elements = Object.keys(state.elements);\n        setState({\n          styles: fromEntries(elements.map(function (element) {\n            return [element, state.styles[element] || {}];\n          })),\n          attributes: fromEntries(elements.map(function (element) {\n            return [element, state.attributes[element]];\n          }))\n        });\n      },\n      requires: ['computeStyles']\n    };\n  }, []);\n  var popperOptions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    var newOptions = {\n      onFirstUpdate: optionsWithDefaults.onFirstUpdate,\n      placement: optionsWithDefaults.placement,\n      strategy: optionsWithDefaults.strategy,\n      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {\n        name: 'applyStyles',\n        enabled: false\n      }])\n    };\n\n    if (reactFastCompare(prevOptions.current, newOptions)) {\n      return prevOptions.current || newOptions;\n    } else {\n      prevOptions.current = newOptions;\n      return newOptions;\n    }\n  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);\n  var popperInstanceRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n  useIsomorphicLayoutEffect(function () {\n    if (popperInstanceRef.current) {\n      popperInstanceRef.current.setOptions(popperOptions);\n    }\n  }, [popperOptions]);\n  useIsomorphicLayoutEffect(function () {\n    if (referenceElement == null || popperElement == null) {\n      return;\n    }\n\n    var createPopper$1 = options.createPopper || createPopper;\n    var popperInstance = createPopper$1(referenceElement, popperElement, popperOptions);\n    popperInstanceRef.current = popperInstance;\n    return function () {\n      popperInstance.destroy();\n      popperInstanceRef.current = null;\n    };\n  }, [referenceElement, popperElement, options.createPopper]);\n  return {\n    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,\n    styles: state.styles,\n    attributes: state.attributes,\n    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,\n    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null\n  };\n};\n\nvar NOOP = function NOOP() {\n  return void 0;\n};\n\nvar NOOP_PROMISE = function NOOP_PROMISE() {\n  return Promise.resolve(null);\n};\n\nvar EMPTY_MODIFIERS = [];\nfunction Popper(_ref) {\n  var _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,\n      _ref$strategy = _ref.strategy,\n      strategy = _ref$strategy === void 0 ? 'absolute' : _ref$strategy,\n      _ref$modifiers = _ref.modifiers,\n      modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS : _ref$modifiers,\n      referenceElement = _ref.referenceElement,\n      onFirstUpdate = _ref.onFirstUpdate,\n      innerRef = _ref.innerRef,\n      children = _ref.children;\n  var referenceNode = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ManagerReferenceNodeContext);\n\n  var _React$useState = react__WEBPACK_IMPORTED_MODULE_0__.useState(null),\n      popperElement = _React$useState[0],\n      setPopperElement = _React$useState[1];\n\n  var _React$useState2 = react__WEBPACK_IMPORTED_MODULE_0__.useState(null),\n      arrowElement = _React$useState2[0],\n      setArrowElement = _React$useState2[1];\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    setRef(innerRef, popperElement);\n  }, [innerRef, popperElement]);\n  var options = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return {\n      placement: placement,\n      strategy: strategy,\n      onFirstUpdate: onFirstUpdate,\n      modifiers: [].concat(modifiers, [{\n        name: 'arrow',\n        enabled: arrowElement != null,\n        options: {\n          element: arrowElement\n        }\n      }])\n    };\n  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);\n\n  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options),\n      state = _usePopper.state,\n      styles = _usePopper.styles,\n      forceUpdate = _usePopper.forceUpdate,\n      update = _usePopper.update;\n\n  var childrenProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(function () {\n    return {\n      ref: setPopperElement,\n      style: styles.popper,\n      placement: state ? state.placement : placement,\n      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,\n      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,\n      arrowProps: {\n        style: styles.arrow,\n        ref: setArrowElement\n      },\n      forceUpdate: forceUpdate || NOOP,\n      update: update || NOOP_PROMISE\n    };\n  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);\n  return unwrapArray(children)(childrenProps);\n}\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = \"production\" !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nvar warning_1 = warning;\n\nfunction Reference(_ref) {\n  var children = _ref.children,\n      innerRef = _ref.innerRef;\n  var setReferenceNode = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ManagerReferenceNodeSetterContext);\n  var refHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(function (node) {\n    setRef(innerRef, node);\n    safeInvoke(setReferenceNode, node);\n  }, [innerRef, setReferenceNode]); // ran on unmount\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    return function () {\n      return setRef(innerRef, null);\n    };\n  });\n  react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {\n    warning_1(Boolean(setReferenceNode), '`Reference` should not be used outside of a `Manager` component.');\n  }, [setReferenceNode]);\n  return unwrapArray(children)({\n    ref: refHandler\n  });\n}\n\nvar CDropdownContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CDropdown = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, alignment = _a.alignment, className = _a.className, dark = _a.dark, direction = _a.direction, onHide = _a.onHide, onShow = _a.onShow, _b = _a.placement, placement = _b === void 0 ? 'bottom-start' : _b, _c = _a.popper, popper = _c === void 0 ? true : _c, _d = _a.variant, variant = _d === void 0 ? 'btn-group' : _d, _e = _a.component, component = _e === void 0 ? 'div' : _e, _f = _a.visible, visible = _f === void 0 ? false : _f, rest = __rest(_a, [\"children\", \"alignment\", \"className\", \"dark\", \"direction\", \"onHide\", \"onShow\", \"placement\", \"popper\", \"variant\", \"component\", \"visible\"]);\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _g[0], setVisible = _g[1];\n    var dropdownRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, dropdownRef);\n    var Component = variant === 'nav-item' ? 'li' : component;\n    // Disable popper if responsive aligment is set.\n    if (typeof alignment === 'object') {\n        popper = false;\n    }\n    var contextValues = {\n        alignment: alignment,\n        dark: dark,\n        direction: direction,\n        placement: placement,\n        popper: popper,\n        variant: variant,\n        visible: _visible,\n        setVisible: setVisible,\n    };\n    var _className = classNames(variant === 'nav-item' ? 'nav-item dropdown' : variant, {\n        show: _visible,\n    }, direction, className);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        _visible &&\n            setTimeout(function () {\n                window.addEventListener('click', handleClickOutside);\n                window.addEventListener('keyup', handleKeyup);\n            });\n        return function () {\n            window.removeEventListener('click', handleClickOutside);\n            window.removeEventListener('keyup', handleKeyup);\n        };\n    }, [_visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(visible);\n    }, [visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        _visible && onShow && onShow();\n        !_visible && onHide && onHide();\n    }, [_visible]);\n    var handleKeyup = function (event) {\n        var _a;\n        if (!((_a = dropdownRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n            setVisible(false);\n        }\n    };\n    var handleClickOutside = function (event) {\n        var _a;\n        if (!((_a = dropdownRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target))) {\n            setVisible(false);\n        }\n    };\n    var dropdownContent = function () {\n        return variant === 'input-group' ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children)) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: forkedRef }), children));\n    };\n    return popper ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CDropdownContext.Provider, { value: contextValues },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Manager, null, dropdownContent()))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CDropdownContext.Provider, { value: contextValues }, dropdownContent()));\n});\nvar alignmentDirection = PropTypes.oneOf(['start', 'end']);\nCDropdown.propTypes = {\n    // @ts-expect-error TODO: we have to find a solution\n    alignment: PropTypes.oneOfType([\n        alignmentDirection,\n        PropTypes.shape({ xs: alignmentDirection }),\n        PropTypes.shape({ sm: alignmentDirection }),\n        PropTypes.shape({ md: alignmentDirection }),\n        PropTypes.shape({ lg: alignmentDirection }),\n        PropTypes.shape({ xl: alignmentDirection }),\n        PropTypes.shape({ xxl: alignmentDirection }),\n    ]),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    dark: PropTypes.bool,\n    direction: PropTypes.oneOf(['dropup', 'dropend', 'dropstart']),\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    placement: placementPropType,\n    popper: PropTypes.bool,\n    variant: PropTypes.oneOf(['btn-group', 'dropdown', 'input-group', 'nav-item']),\n    visible: PropTypes.bool,\n};\nCDropdown.displayName = 'CDropdown';\n\nvar CDropdownDivider = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, rest = __rest(_a, [\"className\"]);\n    var _className = classNames('dropdown-divider', className);\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"hr\", __assign({ className: _className }, rest, { ref: ref }));\n});\nCDropdownDivider.propTypes = {\n    className: PropTypes.string,\n};\nCDropdownDivider.displayName = 'CDropdownDivider';\n\nvar CDropdownHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'h6' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('dropdown-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCDropdownHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCDropdownHeader.displayName = 'CDropdownHeader';\n\nvar CDropdownItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, component = _b === void 0 ? 'a' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('dropdown-item', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, __assign({ component: component }, rest, { className: _className, ref: ref }), children));\n});\nCDropdownItem.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCDropdownItem.displayName = 'CDropdownItem';\n\nvar CDropdownItemPlain = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'span' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('dropdown-item-text', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCDropdownItemPlain.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCDropdownItemPlain.displayName = 'CDropdownItemPlain';\n\nvar CDropdownMenu = function (_a) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'ul' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CDropdownContext), alignment = _c.alignment, dark = _c.dark, direction = _c.direction, placement = _c.placement, popper = _c.popper, visible = _c.visible;\n    var _placement = placement;\n    if (direction === 'dropup') {\n        _placement = 'top-start';\n    }\n    if (direction === 'dropend') {\n        _placement = 'right-start';\n    }\n    if (direction === 'dropstart') {\n        _placement = 'left-start';\n    }\n    if (alignment === 'end') {\n        _placement = 'bottom-end';\n    }\n    var alignmentClassNames = function (alignment) {\n        var classNames = [];\n        if (typeof alignment === 'object') {\n            Object.keys(alignment).map(function (key) {\n                classNames.push(\"dropdown-menu\" + (key === 'xs' ? '' : \"-\" + key) + \"-\" + alignment[key]);\n            });\n        }\n        if (typeof alignment === 'string') {\n            classNames.push(\"dropdown-menu-\" + alignment);\n        }\n        return classNames;\n    };\n    var _className = classNames('dropdown-menu', {\n        'dropdown-menu-dark': dark,\n        show: visible,\n    }, alignment && alignmentClassNames(alignment), className);\n    var dropdownMenuComponent = function (style, ref) {\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className, ref: ref, style: style, role: \"menu\", \"aria-hidden\": !visible }, (!popper && { 'data-coreui-popper': 'static' }), rest), Component === 'ul'\n            ? react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child, index) {\n                if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child)) {\n                    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", { key: index }, react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child));\n                }\n                return;\n            })\n            : children));\n    };\n    return popper && visible ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Popper, { placement: _placement }, function (_a) {\n        var ref = _a.ref, style = _a.style;\n        return dropdownMenuComponent(style, ref);\n    })) : (dropdownMenuComponent());\n};\nCDropdownMenu.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCDropdownMenu.displayName = 'CDropdownMenu';\n\nvar CDropdownToggle = function (_a) {\n    var children = _a.children, _b = _a.caret, caret = _b === void 0 ? true : _b, className = _a.className, split = _a.split, _c = _a.trigger, trigger = _c === void 0 ? 'click' : _c, rest = __rest(_a, [\"children\", \"caret\", \"className\", \"split\", \"trigger\"]);\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CDropdownContext), popper = _d.popper, variant = _d.variant, visible = _d.visible, setVisible = _d.setVisible;\n    var _className = classNames({\n        'dropdown-toggle': caret,\n        'dropdown-toggle-split': split,\n        'nav-link': variant === 'nav-item',\n    }, className);\n    var triggers = __assign(__assign({}, ((trigger === 'click' || trigger.includes('click')) && {\n        onClick: function (event) {\n            event.preventDefault();\n            setVisible(!visible);\n        },\n    })), ((trigger === 'focus' || trigger.includes('focus')) && {\n        onFocus: function () { return setVisible(true); },\n        onBlur: function () { return setVisible(false); },\n    }));\n    var togglerProps = __assign({ className: _className, 'aria-expanded': visible }, triggers);\n    // We use any because Toggler can be `a` as well as `button`.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var Toggler = function (ref) {\n        return variant === 'nav-item' ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", __assign({ href: \"#\" }, togglerProps, { ref: ref }), children)) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CButton, __assign({ type: \"button\" }, togglerProps, { tabIndex: 0 }, rest, { ref: ref }),\n            children,\n            split && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"visually-hidden\" }, \"Toggle Dropdown\")));\n    };\n    return popper ? react__WEBPACK_IMPORTED_MODULE_0__.createElement(Reference, null, function (_a) {\n        var ref = _a.ref;\n        return Toggler(ref);\n    }) : Toggler();\n};\nCDropdownToggle.propTypes = {\n    caret: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    split: PropTypes.bool,\n    trigger: triggerPropType,\n};\nCDropdownToggle.displayName = 'CDropdownToggle';\n\nvar BREAKPOINTS$2 = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'xs',\n];\nvar CCol = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var repsonsiveCLassNames = [];\n    BREAKPOINTS$2.forEach(function (bp) {\n        var breakpoint = rest[bp];\n        delete rest[bp];\n        var infix = bp === 'xs' ? '' : \"-\" + bp;\n        if (typeof breakpoint === 'number' || typeof breakpoint === 'string') {\n            repsonsiveCLassNames.push(\"col\" + infix + \"-\" + breakpoint);\n        }\n        if (typeof breakpoint === 'boolean') {\n            repsonsiveCLassNames.push(\"col\" + infix);\n        }\n        if (breakpoint && typeof breakpoint === 'object') {\n            if (typeof breakpoint.span === 'number' || typeof breakpoint.span === 'string') {\n                repsonsiveCLassNames.push(\"col\" + infix + \"-\" + breakpoint.span);\n            }\n            if (typeof breakpoint.span === 'boolean') {\n                repsonsiveCLassNames.push(\"col\" + infix);\n            }\n            if (typeof breakpoint.order === 'number' || typeof breakpoint.order === 'string') {\n                repsonsiveCLassNames.push(\"order\" + infix + \"-\" + breakpoint.order);\n            }\n            if (typeof breakpoint.offset === 'number') {\n                repsonsiveCLassNames.push(\"offset\" + infix + \"-\" + breakpoint.offset);\n            }\n        }\n    });\n    var _className = classNames(repsonsiveCLassNames.length ? repsonsiveCLassNames : 'col', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nvar span = PropTypes.oneOfType([\n    PropTypes.bool,\n    PropTypes.number,\n    PropTypes.string,\n    PropTypes.oneOf(['auto']),\n]);\nvar col = PropTypes.oneOfType([\n    span,\n    PropTypes.shape({\n        span: span,\n        offset: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n        order: PropTypes.oneOfType([\n            PropTypes.oneOf(['first', 'last']),\n            PropTypes.number,\n            PropTypes.string,\n        ]),\n    }),\n]);\nCCol.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    xs: col,\n    sm: col,\n};\nCCol.displayName = 'CCol';\n\nvar BREAKPOINTS$1 = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'fluid',\n];\nvar CContainer = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var repsonsiveCLassNames = [];\n    BREAKPOINTS$1.forEach(function (bp) {\n        var breakpoint = rest[bp];\n        delete rest[bp];\n        breakpoint && repsonsiveCLassNames.push(\"container-\" + bp);\n    });\n    var _className = classNames(repsonsiveCLassNames.length ? repsonsiveCLassNames : 'container', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCContainer.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    sm: PropTypes.bool,\n    md: PropTypes.bool,\n    lg: PropTypes.bool,\n    xl: PropTypes.bool,\n    xxl: PropTypes.bool,\n    fluid: PropTypes.bool,\n};\nCContainer.displayName = 'CContainer';\n\nvar BREAKPOINTS = [\n    'xxl',\n    'xl',\n    'lg',\n    'md',\n    'sm',\n    'xs',\n];\nvar CRow = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var repsonsiveCLassNames = [];\n    BREAKPOINTS.forEach(function (bp) {\n        var breakpoint = rest[bp];\n        delete rest[bp];\n        var infix = bp === 'xs' ? '' : \"-\" + bp;\n        if (typeof breakpoint === 'object') {\n            if (breakpoint.cols) {\n                repsonsiveCLassNames.push(\"row-cols\" + infix + \"-\" + breakpoint.cols);\n            }\n            if (typeof breakpoint.gutter === 'number') {\n                repsonsiveCLassNames.push(\"g\" + infix + \"-\" + breakpoint.gutter);\n            }\n            if (typeof breakpoint.gutterX === 'number') {\n                repsonsiveCLassNames.push(\"gx\" + infix + \"-\" + breakpoint.gutterX);\n            }\n            if (typeof breakpoint.gutterY === 'number') {\n                repsonsiveCLassNames.push(\"gy\" + infix + \"-\" + breakpoint.gutterY);\n            }\n        }\n    });\n    var _className = classNames('row', repsonsiveCLassNames, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: _className, ref: ref }, children));\n});\nvar bp = PropTypes.shape({\n    cols: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.string]),\n    gutter: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    gutterX: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    gutterY: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n});\nCRow.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    xs: bp,\n    sm: bp,\n    md: bp,\n    lg: bp,\n    xl: bp,\n    xxl: bp,\n};\nCRow.displayName = 'CRow';\n\nvar CFooter = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, position = _a.position, rest = __rest(_a, [\"children\", \"className\", \"position\"]);\n    var _className = classNames('footer', (_b = {}, _b[\"footer-\" + position] = position, _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCFooter.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    position: PropTypes.oneOf(['fixed', 'sticky']),\n};\nCFooter.displayName = 'CFooter';\n\nvar CForm = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, validated = _a.validated, rest = __rest(_a, [\"children\", \"className\", \"validated\"]);\n    var _className = classNames({ 'was-validated': validated }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCForm.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    validated: PropTypes.bool,\n};\nCForm.displayName = 'CForm';\n\nvar CFormLabel = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, customClassName = _a.customClassName, rest = __rest(_a, [\"children\", \"className\", \"customClassName\"]);\n    var _className = customClassName ? customClassName : classNames('form-label', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCFormLabel.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    customClassName: PropTypes.string,\n};\nCFormLabel.displayName = 'CFormLabel';\n\nvar CFormCheck = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var className = _a.className, button = _a.button, hitArea = _a.hitArea, id = _a.id, indeterminate = _a.indeterminate, inline = _a.inline, invalid = _a.invalid, label = _a.label, _c = _a.type, type = _c === void 0 ? 'checkbox' : _c, valid = _a.valid, rest = __rest(_a, [\"className\", \"button\", \"hitArea\", \"id\", \"indeterminate\", \"inline\", \"invalid\", \"label\", \"type\", \"valid\"]);\n    var inputRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, inputRef);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        if (inputRef.current && indeterminate) {\n            inputRef.current.indeterminate = indeterminate;\n        }\n    }, [indeterminate]);\n    var _className = classNames('form-check', {\n        'form-check-inline': inline,\n        'is-invalid': invalid,\n        'is-valid': valid,\n    }, className);\n    var inputClassName = classNames(button ? 'btn-check' : 'form-check-input', {\n        'is-invalid': invalid,\n        'is-valid': valid,\n        'me-2': hitArea,\n    });\n    var labelClassName = classNames(button\n        ? classNames('btn', button.variant ? \"btn-\" + button.variant + \"-\" + button.color : \"btn-\" + button.color, (_b = {},\n            _b[\"btn-\" + button.size] = button.size,\n            _b), \"\" + button.shape)\n        : 'form-check-label');\n    var formControl = function () {\n        return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", __assign({ type: type, className: inputClassName, id: id }, rest, { ref: forkedRef }));\n    };\n    var formLabel = function () {\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CFormLabel, __assign({ customClassName: labelClassName }, (id && { htmlFor: id })), label));\n    };\n    return button ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n        formControl(),\n        label && formLabel())) : label ? (hitArea ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CFormLabel, __assign({ customClassName: className }, (id && { htmlFor: id })),\n        formControl(),\n        label)) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: _className },\n        formControl(),\n        formLabel()))) : (formControl());\n});\nCFormCheck.propTypes = {\n    button: PropTypes.object,\n    className: PropTypes.string,\n    hitArea: PropTypes.oneOf(['full']),\n    id: PropTypes.string,\n    indeterminate: PropTypes.bool,\n    inline: PropTypes.bool,\n    invalid: PropTypes.bool,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    type: PropTypes.oneOf(['checkbox', 'radio']),\n    valid: PropTypes.bool,\n};\nCFormCheck.displayName = 'CFormCheck';\n\nvar CFormFeedback = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, _c = _a.component, Component = _c === void 0 ? 'div' : _c, invalid = _a.invalid, tooltip = _a.tooltip, valid = _a.valid, rest = __rest(_a, [\"children\", \"className\", \"component\", \"invalid\", \"tooltip\", \"valid\"]);\n    var _className = classNames((_b = {},\n        _b[\"invalid-\" + (tooltip ? 'tooltip' : 'feedback')] = invalid,\n        _b[\"valid-\" + (tooltip ? 'tooltip' : 'feedback')] = valid,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCFormFeedback.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    invalid: PropTypes.bool,\n    tooltip: PropTypes.bool,\n    valid: PropTypes.bool,\n};\nCFormFeedback.displayName = 'CFormFeedback';\n\nvar CFormFloating = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('form-floating', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCFormFloating.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCFormFloating.displayName = 'CFormFloating';\n\nvar CFormInput = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, invalid = _a.invalid, plainText = _a.plainText, size = _a.size, _c = _a.type, type = _c === void 0 ? 'text' : _c, valid = _a.valid, rest = __rest(_a, [\"children\", \"className\", \"invalid\", \"plainText\", \"size\", \"type\", \"valid\"]);\n    var _className = classNames(plainText ? 'form-control-plaintext' : 'form-control', (_b = {},\n        _b[\"form-control-\" + size] = size,\n        _b['form-control-color'] = type === 'color',\n        _b['is-invalid'] = invalid,\n        _b['is-valid'] = valid,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", __assign({ type: type, className: _className }, rest, { ref: ref }), children));\n});\nCFormInput.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    invalid: PropTypes.bool,\n    plainText: PropTypes.bool,\n    size: PropTypes.oneOf(['sm', 'lg']),\n    type: PropTypes.oneOfType([PropTypes.oneOf(['color', 'file', 'text']), PropTypes.string]),\n    valid: PropTypes.bool,\n};\nCFormInput.displayName = 'CFormInput';\n\nvar CFormRange = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, rest = __rest(_a, [\"className\"]);\n    var _className = classNames('form-range', className);\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", __assign({ type: \"range\", className: _className }, rest, { ref: ref }));\n});\nCFormRange.propTypes = {\n    className: PropTypes.string,\n};\nCFormRange.displayName = 'CFormRange';\n\nvar CFormSelect = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, htmlSize = _a.htmlSize, invalid = _a.invalid, options = _a.options, size = _a.size, valid = _a.valid, rest = __rest(_a, [\"children\", \"className\", \"htmlSize\", \"invalid\", \"options\", \"size\", \"valid\"]);\n    var _className = classNames('form-select', (_b = {},\n        _b[\"form-select-\" + size] = size,\n        _b['is-invalid'] = invalid,\n        _b['is-valid'] = valid,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"select\", __assign({ className: _className, size: htmlSize }, rest, { ref: ref }), options\n        ? options.map(function (option, index) {\n            return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"option\", __assign({}, (typeof option === 'object' &&\n                option.disabled && { disabled: option.disabled }), (typeof option === 'object' && option.value && { value: option.value }), { key: index }), typeof option === 'string' ? option : option.label));\n        })\n        : children));\n});\nCFormSelect.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    htmlSize: PropTypes.number,\n    invalid: PropTypes.bool,\n    options: PropTypes.array,\n    size: PropTypes.oneOf(['sm', 'lg']),\n    valid: PropTypes.bool,\n};\nCFormSelect.displayName = 'CFormSelect';\n\nvar CFormSwitch = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var className = _a.className, id = _a.id, invalid = _a.invalid, label = _a.label, size = _a.size, _c = _a.type, type = _c === void 0 ? 'checkbox' : _c, valid = _a.valid, rest = __rest(_a, [\"className\", \"id\", \"invalid\", \"label\", \"size\", \"type\", \"valid\"]);\n    var _className = classNames('form-check form-switch', (_b = {},\n        _b[\"form-switch-\" + size] = size,\n        _b['is-invalid'] = invalid,\n        _b['is-valid'] = valid,\n        _b), className);\n    var inputClassName = classNames('form-check-input', {\n        'is-invalid': invalid,\n        'is-valid': valid,\n    });\n    var labelClassName = classNames('form-check-label');\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: _className },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", __assign({ type: type, className: inputClassName, id: id }, rest, { ref: ref })),\n        label && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CFormLabel, __assign({ customClassName: labelClassName }, (id && { htmlFor: id })), label))));\n});\nCFormSwitch.propTypes = {\n    className: PropTypes.string,\n    id: PropTypes.string,\n    invalid: PropTypes.bool,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    size: PropTypes.oneOf(['lg', 'xl']),\n    type: PropTypes.oneOf(['checkbox', 'radio']),\n    valid: PropTypes.bool,\n};\nCFormSwitch.displayName = 'CFormSwitch';\n\nvar CFormText = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'div' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('form-text', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCFormText.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCFormText.displayName = 'CFormText';\n\nvar CFormTextarea = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, invalid = _a.invalid, plainText = _a.plainText, valid = _a.valid, rest = __rest(_a, [\"children\", \"className\", \"invalid\", \"plainText\", \"valid\"]);\n    var _className = classNames(plainText ? 'form-control-plaintext' : 'form-control', {\n        'is-invalid': invalid,\n        'is-valid': valid,\n    }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"textarea\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCFormTextarea.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    invalid: PropTypes.bool,\n    plainText: PropTypes.bool,\n    valid: PropTypes.bool,\n};\nCFormTextarea.displayName = 'CFormTextarea';\n\nvar CInputGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, size = _a.size, rest = __rest(_a, [\"children\", \"className\", \"size\"]);\n    var _className = classNames('input-group', (_b = {},\n        _b[\"input-group-\" + size] = size,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCInputGroup.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    size: PropTypes.oneOf(['sm', 'lg']),\n};\nCInputGroup.displayName = 'CInputGroup';\n\nvar CInputGroupText = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.component, Component = _b === void 0 ? 'span' : _b, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('input-group-text', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCInputGroupText.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCInputGroupText.displayName = 'CInputGroupText';\n\nvar CHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, container = _a.container, position = _a.position, rest = __rest(_a, [\"children\", \"className\", \"container\", \"position\"]);\n    var _className = classNames('header', (_b = {}, _b[\"header-\" + position] = position, _b), className);\n    var content;\n    if (container) {\n        content = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"container\" + (container !== true ? '-' + container : '') }, children));\n    }\n    else {\n        content = children;\n    }\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), content));\n});\nCHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    container: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.oneOf([\n            'sm',\n            'md',\n            'lg',\n            'xl',\n            'xxl',\n            'fluid',\n        ]),\n    ]),\n    position: PropTypes.oneOf(['fixed', 'sticky']),\n};\nCHeader.displayName = 'CHeader';\n\nvar CHeaderBrand = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'a' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('header-brand', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCHeaderBrand.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCHeaderBrand.displayName = 'CHeaderBrand';\n\nvar CHeaderDivider = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, rest = __rest(_a, [\"className\"]);\n    var _className = classNames('header-divider', className);\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }));\n});\nCHeaderDivider.propTypes = {\n    className: PropTypes.string,\n};\nCHeaderDivider.displayName = 'CHeaderDivider';\n\nvar CHeaderNav = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'ul' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('header-nav', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className, role: \"navigation\" }, rest, { ref: ref }), children));\n});\nCHeaderNav.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCHeaderNav.displayName = 'CHeaderNav';\n\nvar CHeaderText = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('header-text', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCHeaderText.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCHeaderText.displayName = 'CHeaderText';\n\nvar CHeaderToggler = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('header-toggler', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __assign({ type: \"button\", className: _className }, rest, { ref: ref }), children ? children : react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"header-toggler-icon\" })));\n});\nCHeaderToggler.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCHeaderToggler.displayName = 'CHeaderToggler';\n\nvar CImage = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var align = _a.align, className = _a.className, fluid = _a.fluid, rounded = _a.rounded, thumbnail = _a.thumbnail, rest = __rest(_a, [\"align\", \"className\", \"fluid\", \"rounded\", \"thumbnail\"]);\n    var _className = classNames((_b = {},\n        _b[\"float-\" + align] = align && (align === 'start' || align === 'end'),\n        _b['d-block mx-auto'] = align && align === 'center',\n        _b['img-fluid'] = fluid,\n        _b.rounded = rounded,\n        _b['img-thumbnail'] = thumbnail,\n        _b), className);\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"img\", __assign({ className: _className }, rest, { ref: ref }));\n});\nCImage.propTypes = {\n    align: PropTypes.oneOf(['start', 'center', 'end']),\n    className: PropTypes.string,\n    fluid: PropTypes.bool,\n    rounded: PropTypes.bool,\n    thumbnail: PropTypes.bool,\n};\nCImage.displayName = 'CImage';\n\nvar CListGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, _c = _a.component, Component = _c === void 0 ? 'ul' : _c, flush = _a.flush, layout = _a.layout;\n    var _className = classNames('list-group', (_b = {\n            'list-group-flush': flush\n        },\n        _b[\"list-group-\" + layout] = layout,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { className: _className, ref: ref }, children));\n});\nCListGroup.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    flush: PropTypes.bool,\n    layout: PropTypes.oneOf([\n        'horizontal',\n        'horizontal-sm',\n        'horizontal-md',\n        'horizontal-lg',\n        'horizontal-xl',\n        'horizontal-xxl',\n    ]),\n};\nCListGroup.displayName = 'CListGroup';\n\nvar CListGroupItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, active = _a.active, className = _a.className, disabled = _a.disabled, color = _a.color, _c = _a.component, component = _c === void 0 ? 'li' : _c, rest = __rest(_a, [\"children\", \"active\", \"className\", \"disabled\", \"color\", \"component\"]);\n    var _className = classNames('list-group-item', (_b = {},\n        _b[\"list-group-item-\" + color] = color,\n        _b['list-group-item-action'] = component === 'a' || component === 'button',\n        _b.active = active,\n        _b.disabled = disabled,\n        _b), className);\n    var Component = component === 'a' || component === 'button' ? CLink : component;\n    rest = __assign(__assign(__assign(__assign({}, ((component === 'a' || component === 'button') && {\n        active: active,\n        disabled: disabled,\n        component: component,\n        ref: ref,\n    })), (active && { 'aria-current': true })), (disabled && { 'aria-disabled': true })), rest);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest), children));\n});\nCListGroupItem.propTypes = {\n    active: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    component: PropTypes.elementType,\n    disabled: PropTypes.bool,\n};\nCListGroupItem.displayName = 'CListGroupItem';\n\nvar CModalContent = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('modal-content', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCModalContent.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCModalContent.displayName = 'CModalContent';\n\nvar CModalDialog = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, alignment = _a.alignment, className = _a.className, fullscreen = _a.fullscreen, scrollable = _a.scrollable, size = _a.size, rest = __rest(_a, [\"children\", \"alignment\", \"className\", \"fullscreen\", \"scrollable\", \"size\"]);\n    var _className = classNames('modal-dialog', (_b = {\n            'modal-dialog-centered': alignment === 'center'\n        },\n        _b[typeof fullscreen === 'boolean'\n            ? 'modal-fullscreen'\n            : \"modal-fullscreen-\" + fullscreen + \"-down\"] = fullscreen,\n        _b['modal-dialog-scrollable'] = scrollable,\n        _b[\"modal-\" + size] = size,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCModalDialog.propTypes = {\n    alignment: PropTypes.oneOf(['top', 'center']),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    fullscreen: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),\n    ]),\n    scrollable: PropTypes.bool,\n    size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n};\nCModalDialog.displayName = 'CModalDialog';\n\nvar CModalContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CModal = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, alignment = _a.alignment, _b = _a.backdrop, backdrop = _b === void 0 ? true : _b, className = _a.className, _c = _a.duration, duration = _c === void 0 ? 150 : _c, fullscreen = _a.fullscreen, _d = _a.keyboard, keyboard = _d === void 0 ? true : _d, onClose = _a.onClose, onClosePrevented = _a.onClosePrevented, onShow = _a.onShow, _e = _a.portal, portal = _e === void 0 ? true : _e, scrollable = _a.scrollable, size = _a.size, _f = _a.transition, transition = _f === void 0 ? true : _f, visible = _a.visible;\n    var modalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, modalRef);\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _g[0], setVisible = _g[1];\n    var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), staticBackdrop = _h[0], setStaticBackdrop = _h[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(visible);\n    }, [visible]);\n    var contextValues = {\n        visible: _visible,\n        setVisible: setVisible,\n    };\n    var handleDismiss = function () {\n        if (backdrop === 'static') {\n            return setStaticBackdrop(true);\n        }\n        return onClose && onClose();\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(function () {\n        onClosePrevented && onClosePrevented();\n        setTimeout(function () { return setStaticBackdrop(false); }, duration);\n    }, [staticBackdrop]);\n    var getTransitionClass = function (state) {\n        return state === 'entering'\n            ? 'd-block'\n            : state === 'entered'\n                ? 'show d-block'\n                : state === 'exiting'\n                    ? 'd-block'\n                    : '';\n    };\n    var _className = classNames('modal', {\n        'modal-static': staticBackdrop,\n        fade: transition,\n    }, className);\n    // Set focus to modal after open\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(function () {\n        if (_visible) {\n            document.body.classList.add('modal-open');\n            setTimeout(function () {\n                var _a;\n                (_a = modalRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n            }, !transition ? 0 : duration);\n        }\n        else {\n            document.body.classList.remove('modal-open');\n        }\n        return function () { return document.body.classList.remove('modal-open'); };\n    }, [_visible]);\n    var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n        if (event.key === 'Escape' && keyboard) {\n            return handleDismiss();\n        }\n    }, [modalRef, handleDismiss]);\n    var modal = function (ref, transitionClass) {\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CModalContext.Provider, { value: contextValues },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: classNames(_className, transitionClass), tabIndex: -1, role: \"dialog\", ref: ref },\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(CModalDialog, { alignment: alignment, fullscreen: fullscreen, scrollable: scrollable, size: size, onClick: function (event) { return event.stopPropagation(); } },\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(CModalContent, null, children)))));\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { onClick: handleDismiss, onKeyDown: handleKeyDown },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, mountOnEnter: true, onEnter: onShow, onExit: onClose, unmountOnExit: true, timeout: !transition ? 0 : duration }, function (state) {\n                var transitionClass = getTransitionClass(state);\n                return typeof window !== 'undefined' && portal\n                    ? (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(modal(forkedRef, transitionClass), document.body)\n                    : modal(forkedRef, transitionClass);\n            })),\n        typeof window !== 'undefined' && portal\n            ? backdrop && (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(CBackdrop, { visible: _visible }), document.body)\n            : backdrop && react__WEBPACK_IMPORTED_MODULE_0__.createElement(CBackdrop, { visible: _visible })));\n});\nCModal.propTypes = {\n    alignment: PropTypes.oneOf(['top', 'center']),\n    backdrop: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['static'])]),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    duration: PropTypes.number,\n    fullscreen: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),\n    ]),\n    keyboard: PropTypes.bool,\n    onClose: PropTypes.func,\n    onClosePrevented: PropTypes.func,\n    onShow: PropTypes.func,\n    portal: PropTypes.bool,\n    scrollable: PropTypes.bool,\n    size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n    transition: PropTypes.bool,\n    visible: PropTypes.bool,\n};\nCModal.displayName = 'CModal';\n\nvar CModalBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('modal-body', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCModalBody.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCModalBody.displayName = 'CModalBody';\n\nvar CModalFooter = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('modal-footer', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCModalFooter.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCModalFooter.displayName = 'CModalFooter';\n\nvar CModalHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, _b = _a.closeButton, closeButton = _b === void 0 ? true : _b, rest = __rest(_a, [\"children\", \"className\", \"closeButton\"]);\n    var setVisible = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CModalContext).setVisible;\n    var _className = classNames('modal-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n        children,\n        closeButton && react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCloseButton, { onClick: function () { return setVisible(false); } })));\n});\nCModalHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    closeButton: PropTypes.bool,\n};\nCModalHeader.displayName = 'CModalHeader';\n\nvar CModalTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'h5' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('modal-title', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCModalTitle.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCModalTitle.displayName = 'CModalTitle';\n\nvar CNav = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, _c = _a.component, Component = _c === void 0 ? 'ul' : _c, layout = _a.layout, variant = _a.variant, rest = __rest(_a, [\"children\", \"className\", \"component\", \"layout\", \"variant\"]);\n    var _className = classNames('nav', (_b = {},\n        _b[\"nav-\" + layout] = layout,\n        _b[\"nav-\" + variant] = variant,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className, role: \"navigation\" }, rest, { ref: ref }), children));\n});\nCNav.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    layout: PropTypes.oneOf(['fill', 'justified']),\n    variant: PropTypes.oneOf(['tabs', 'pills']),\n};\nCNav.displayName = 'CNav';\n\nvar CNavGroupItems = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('nav-group-items', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCNavGroupItems.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCNavGroupItems.displayName = 'CNavGroupItems';\n\nvar CNavContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CSidebarNav = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(''), visibleGroup = _b[0], setVisibleGroup = _b[1];\n    var CNavContextValues = {\n        visibleGroup: visibleGroup,\n        setVisibleGroup: setVisibleGroup,\n    };\n    var classes = classNames('sidebar-nav', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", __assign({ className: classes, ref: ref }, rest),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CNavContext.Provider, { value: CNavContextValues }, react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child, index) {\n            if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child)) {\n                return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, { key: index, idx: \"\" + index });\n            }\n            return;\n        }))));\n});\nCSidebarNav.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCSidebarNav.displayName = 'CSidebarNav';\n\nvar CNavGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, compact = _a.compact, idx = _a.idx, toggler = _a.toggler, visible = _a.visible, rest = __rest(_a, [\"children\", \"className\", \"compact\", \"idx\", \"toggler\", \"visible\"]);\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), height = _b[0], setHeight = _b[1];\n    var navItemsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CNavContext), visibleGroup = _c.visibleGroup, setVisibleGroup = _c.setVisibleGroup;\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Boolean(visible || (idx && visibleGroup && visibleGroup.toString().startsWith(idx.toString())))), _visible = _d[0], setVisible = _d[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(Boolean(idx && visibleGroup && visibleGroup.toString().startsWith(idx.toString())));\n    }, [visibleGroup]);\n    var handleTogglerOnCLick = function (event) {\n        event.preventDefault();\n        setVisibleGroup(_visible ? ((idx === null || idx === void 0 ? void 0 : idx.toString().includes('.')) ? idx.slice(0, idx.lastIndexOf('.')) : '') : idx);\n        setVisible(!_visible);\n    };\n    var style = {\n        height: 0,\n    };\n    var onEntering = function () {\n        navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);\n    };\n    var onEntered = function () {\n        setHeight('auto');\n    };\n    var onExit = function () {\n        navItemsRef.current && setHeight(navItemsRef.current.scrollHeight);\n    };\n    var onExiting = function () {\n        var _a;\n        // @ts-expect-error reflow is necessary to get correct height of the element\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        (_a = navItemsRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight;\n        setHeight(0);\n    };\n    var onExited = function () {\n        setHeight(0);\n    };\n    var transitionStyles = {\n        entering: { display: 'block', height: height },\n        entered: { display: 'block', height: height },\n        exiting: { display: 'block', height: height },\n        exited: { height: height },\n    };\n    var _className = classNames('nav-group', { show: _visible }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", __assign({ className: _className }, rest, { ref: ref }),\n        toggler && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", { className: \"nav-link nav-group-toggle\", onClick: function (event) { return handleTogglerOnCLick(event); } }, toggler)),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: 300 }, function (state) { return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: classNames('nav-group-items', {\n                compact: compact,\n            }), style: __assign(__assign({}, style), transitionStyles[state]), ref: navItemsRef }, react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, function (child, index) {\n            if (react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child)) {\n                return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, { key: index, idx: idx + \".\" + index });\n            }\n            return;\n        }))); })));\n});\nCNavGroup.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    compact: PropTypes.bool,\n    idx: PropTypes.string,\n    toggler: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    visible: PropTypes.bool,\n};\nCNavGroup.displayName = 'CNavGroup';\n\nvar CNavLink = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, idx = _a.idx, rest = __rest(_a, [\"children\", \"className\", \"idx\"]);\n    var navLinkRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, navLinkRef);\n    var setVisibleGroup = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CNavContext).setVisibleGroup;\n    var _className = classNames('nav-link', className);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        var _a;\n        rest.active = (_a = navLinkRef.current) === null || _a === void 0 ? void 0 : _a.classList.contains('active');\n        idx && rest.active && setVisibleGroup(idx);\n    }, [rest.active, className]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, __assign({ className: _className }, rest, { ref: forkedRef }), children));\n});\nCNavLink.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    idx: PropTypes.string,\n};\nCNavLink.displayName = 'CNavLink';\n\nvar CNavItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('nav-item', className);\n    if (rest.href || rest.to) {\n        children = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CNavLink, __assign({ className: className }, rest), children));\n    }\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", { className: _className, ref: ref }, children));\n});\nCNavItem.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCNavItem.displayName = 'CNavItem';\n\nvar CNavTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('nav-title', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCNavTitle.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCNavTitle.displayName = 'CNavTitle';\n\nvar CNavbar = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, colorScheme = _a.colorScheme, _c = _a.component, Component = _c === void 0 ? 'nav' : _c, container = _a.container, expand = _a.expand, placement = _a.placement, rest = __rest(_a, [\"children\", \"className\", \"color\", \"colorScheme\", \"component\", \"container\", \"expand\", \"placement\"]);\n    var _className = classNames('navbar', (_b = {},\n        _b[\"bg-\" + color] = color,\n        _b[\"navbar-\" + colorScheme] = colorScheme,\n        _b[typeof expand === 'boolean' ? 'navbar-expand' : \"navbar-expand-\" + expand] = expand,\n        _b), placement, className);\n    var content;\n    if (container) {\n        content = (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"container\" + (container !== true ? '-' + container : '') }, children));\n    }\n    else {\n        content = children;\n    }\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), content));\n});\nCNavbar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    colorScheme: PropTypes.oneOf(['dark', 'light']),\n    component: PropTypes.elementType,\n    container: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.oneOf([\n            'sm',\n            'md',\n            'lg',\n            'xl',\n            'xxl',\n            'fluid',\n        ]),\n    ]),\n    expand: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),\n    ]),\n    placement: PropTypes.oneOf(['fixed-top', 'fixed-bottom', 'sticky-top']),\n};\nCNavbar.displayName = 'CNavbar';\n\nvar CNavbarBrand = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, component = _a.component, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var Component = component ? component : rest.href ? 'a' : 'span';\n    var _className = classNames('navbar-brand', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCNavbarBrand.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCNavbarBrand.displayName = 'CNavbarBrand';\n\nvar CNavbarNav = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'ul' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('navbar-nav', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className, role: \"navigation\" }, rest, { ref: ref }), children));\n});\nCNavbarNav.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCNavbarNav.displayName = 'CNavbarNav';\n\nvar CNavbarText = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('navbar-text', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCNavbarText.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCNavbarText.displayName = 'CNavbarText';\n\nvar CNavbarToggler = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('navbar-toggler', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __assign({ type: \"button\", className: _className }, rest, { ref: ref }), children ? children : react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"navbar-toggler-icon\" })));\n});\nCNavbarToggler.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCNavbarToggler.displayName = 'CNavbarToggler';\n\nvar CPagination = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, align = _a.align, className = _a.className, size = _a.size, rest = __rest(_a, [\"children\", \"align\", \"className\", \"size\"]);\n    var _className = classNames('pagination', (_b = {},\n        _b[\"justify-content-\" + align] = align,\n        _b[\"pagination-\" + size] = size,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"nav\", __assign({ ref: ref }, rest),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", { className: _className }, children)));\n});\nCPagination.propTypes = {\n    align: PropTypes.oneOf(['start', 'center', 'end']),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    size: PropTypes.oneOf(['sm', 'lg']),\n};\nCPagination.displayName = 'CPagination';\n\nvar CPaginationItem = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, component = _a.component, rest = __rest(_a, [\"children\", \"className\", \"component\"]);\n    var _className = classNames('page-item', {\n        active: rest.active,\n        disabled: rest.disabled,\n    }, className);\n    var Component = component ? component : rest.active ? 'span' : 'a';\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", __assign({ className: _className }, (rest.active && { 'aria-current': 'page' })), Component === 'a' ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CLink, __assign({ className: \"page-link\", component: Component }, rest, { ref: ref }), children)) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, { className: \"page-link\", ref: ref }, children))));\n});\nCPaginationItem.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCPaginationItem.displayName = 'CPaginationItem';\n\nvar CPopover = function (_a) {\n    var children = _a.children, content = _a.content, _b = _a.placement, placement = _b === void 0 ? 'top' : _b, _c = _a.offset, offset = _c === void 0 ? [0, 8] : _c, onHide = _a.onHide, onShow = _a.onShow, title = _a.title, _d = _a.trigger, trigger = _d === void 0 ? 'click' : _d, visible = _a.visible, rest = __rest(_a, [\"children\", \"content\", \"placement\", \"offset\", \"onHide\", \"onShow\", \"title\", \"trigger\", \"visible\"]);\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _e[0], setVisible = _e[1];\n    var getTransitionClass = function (state) {\n        return state === 'entering'\n            ? 'fade'\n            : state === 'entered'\n                ? 'fade show'\n                : state === 'exiting'\n                    ? 'fade'\n                    : 'fade';\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Manager, null,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Reference, null, function (_a) {\n            var ref = _a.ref;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, __assign(__assign(__assign({ ref: ref }, ((trigger === 'click' || trigger.includes('click')) && {\n                onClick: function () { return setVisible(!_visible); },\n            })), ((trigger === 'focus' || trigger.includes('focus')) && {\n                onFocus: function () { return setVisible(true); },\n                onBlur: function () { return setVisible(false); },\n            })), ((trigger === 'hover' || trigger.includes('hover')) && {\n                onMouseEnter: function () { return setVisible(true); },\n                onMouseLeave: function () { return setVisible(false); },\n            })));\n        }),\n        typeof window !== 'undefined' &&\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, onEnter: onShow, onExit: onHide, mountOnEnter: true, timeout: {\n                    enter: 0,\n                    exit: 200,\n                }, unmountOnExit: true }, function (state) {\n                var transitionClass = getTransitionClass(state);\n                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Popper, { placement: placement, modifiers: [\n                        {\n                            name: 'offset',\n                            options: {\n                                offset: offset,\n                            },\n                        },\n                    ] }, function (_a) {\n                    var arrowProps = _a.arrowProps, style = _a.style, ref = _a.ref;\n                    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(\"popover bs-popover-\" + (placement === 'left' ? 'start' : placement === 'right' ? 'end' : placement), transitionClass), ref: ref, role: \"tooltip\", style: style }, rest),\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: \"popover-arrow\" }, arrowProps)),\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"popover-header\" }, title),\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"popover-body\" }, content)));\n                }));\n            }), document.body)));\n};\nCPopover.propTypes = {\n    children: PropTypes.any,\n    content: PropTypes.node,\n    placement: PropTypes.oneOf(['auto', 'top', 'right', 'bottom', 'left']),\n    offset: PropTypes.any,\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    title: PropTypes.string,\n    trigger: triggerPropType,\n    visible: PropTypes.bool,\n};\nCPopover.displayName = 'CPopover';\n\nvar CProgressBar = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, animated = _a.animated, className = _a.className, color = _a.color, _c = _a.value, value = _c === void 0 ? 0 : _c, variant = _a.variant, rest = __rest(_a, [\"children\", \"animated\", \"className\", \"color\", \"value\", \"variant\"]);\n    var _className = classNames('progress-bar', (_b = {},\n        _b[\"bg-\" + color] = color,\n        _b[\"progress-bar-\" + variant] = variant,\n        _b['progress-bar-animated'] = animated,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, role: \"progressbar\", style: { width: value + \"%\" }, \"aria-valuenow\": value, \"aria-valuemin\": 0, \"aria-valuemax\": 100 }, rest, { ref: ref }), children));\n});\nCProgressBar.propTypes = {\n    animated: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    value: PropTypes.number,\n    variant: PropTypes.oneOf(['striped']),\n};\nCProgressBar.displayName = 'CProgressBar';\n\nvar CProgress = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, height = _a.height, thin = _a.thin, _b = _a.value, value = _b === void 0 ? 0 : _b, white = _a.white, rest = __rest(_a, [\"children\", \"className\", \"height\", \"thin\", \"value\", \"white\"]);\n    var _className = classNames('progress', {\n        'progress-thin': thin,\n        'progress-white': white,\n    }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: _className, style: height ? { height: height + \"px\" } : {}, ref: ref }, value ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CProgressBar, __assign({ value: value }, rest), children)) : (children)));\n});\nCProgress.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    height: PropTypes.number,\n    thin: PropTypes.bool,\n    value: PropTypes.number,\n    white: PropTypes.bool,\n};\nCProgress.displayName = 'CProgress';\n\nvar isOnMobile = function (element) {\n    return Boolean(getComputedStyle(element).getPropertyValue('--cui-is-mobile'));\n};\nvar isVisible = function (element) {\n    var rect = element.getBoundingClientRect();\n    return (rect.top >= 0 &&\n        rect.left >= 0 &&\n        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n        rect.right <= (window.innerWidth || document.documentElement.clientWidth));\n};\nvar CSidebar = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, narrow = _a.narrow, onHide = _a.onHide, onShow = _a.onShow, onVisibleChange = _a.onVisibleChange, overlaid = _a.overlaid, position = _a.position, size = _a.size, unfoldable = _a.unfoldable, visible = _a.visible, rest = __rest(_a, [\"children\", \"className\", \"narrow\", \"onHide\", \"onShow\", \"onVisibleChange\", \"overlaid\", \"position\", \"size\", \"unfoldable\", \"visible\"]);\n    var sidebarRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, sidebarRef);\n    var _c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), mobile = _c[0], setMobile = _c[1];\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _d[0], setVisible = _d[1];\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), inViewport = _e[0], setInViewport = _e[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));\n        setVisible(visible);\n    }, [visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        typeof inViewport !== 'undefined' && onVisibleChange && onVisibleChange(inViewport);\n        !inViewport && onHide && onHide();\n        inViewport && onShow && onShow();\n    }, [inViewport]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        mobile && visible && setVisible(false);\n    }, [mobile]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        var _a, _b;\n        sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));\n        sidebarRef.current && setInViewport(isVisible(sidebarRef.current));\n        window.addEventListener('resize', function () { return handleResize(); });\n        window.addEventListener('mouseup', handleClickOutside);\n        window.addEventListener('keyup', handleKeyup);\n        (_a = sidebarRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('mouseup', handleOnClick);\n        (_b = sidebarRef.current) === null || _b === void 0 ? void 0 : _b.addEventListener('transitionend', function () {\n            sidebarRef.current && setInViewport(isVisible(sidebarRef.current));\n        });\n        return function () {\n            var _a, _b;\n            window.removeEventListener('resize', function () { return handleResize(); });\n            window.removeEventListener('mouseup', handleClickOutside);\n            window.removeEventListener('keyup', handleKeyup);\n            (_a = sidebarRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('mouseup', handleOnClick);\n            (_b = sidebarRef.current) === null || _b === void 0 ? void 0 : _b.removeEventListener('transitionend', function () {\n                sidebarRef.current && setInViewport(isVisible(sidebarRef.current));\n            });\n        };\n    });\n    var handleHide = function () {\n        setVisible(false);\n    };\n    var handleResize = function () {\n        sidebarRef.current && setMobile(isOnMobile(sidebarRef.current));\n        sidebarRef.current && setInViewport(isVisible(sidebarRef.current));\n    };\n    var handleKeyup = function (event) {\n        if (mobile &&\n            sidebarRef.current &&\n            !sidebarRef.current.contains(event.target)) {\n            handleHide();\n        }\n    };\n    var handleClickOutside = function (event) {\n        if (mobile &&\n            sidebarRef.current &&\n            !sidebarRef.current.contains(event.target)) {\n            handleHide();\n        }\n    };\n    var handleOnClick = function (event) {\n        var target = event.target;\n        target &&\n            target.classList.contains('nav-link') &&\n            !target.classList.contains('nav-group-toggle') &&\n            mobile &&\n            handleHide();\n    };\n    var _className = classNames('sidebar', (_b = {\n            'sidebar-narrow': narrow,\n            'sidebar-overlaid': overlaid\n        },\n        _b[\"sidebar-\" + position] = position,\n        _b[\"sidebar-\" + size] = size,\n        _b['sidebar-narrow-unfoldable'] = unfoldable,\n        _b.show = _visible === true && mobile,\n        _b.hide = _visible === false && !mobile,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: forkedRef }), children),\n        typeof window !== 'undefined' &&\n            mobile &&\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(CBackdrop, { className: \"sidebar-backdrop\", visible: _visible }), document.body)));\n});\nCSidebar.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    narrow: PropTypes.bool,\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    onVisibleChange: PropTypes.func,\n    overlaid: PropTypes.bool,\n    position: PropTypes.oneOf(['fixed', 'sticky']),\n    size: PropTypes.oneOf(['sm', 'lg', 'xl']),\n    unfoldable: PropTypes.bool,\n    visible: PropTypes.bool,\n};\nCSidebar.displayName = 'CSidebar';\n\nvar COffcanvas = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, _c = _a.backdrop, backdrop = _c === void 0 ? true : _c, className = _a.className, _d = _a.keyboard, keyboard = _d === void 0 ? true : _d, onHide = _a.onHide, onShow = _a.onShow, placement = _a.placement, _e = _a.portal, portal = _e === void 0 ? true : _e, _f = _a.scroll, scroll = _f === void 0 ? false : _f, _g = _a.visible, visible = _g === void 0 ? false : _g, rest = __rest(_a, [\"children\", \"backdrop\", \"className\", \"keyboard\", \"onHide\", \"onShow\", \"placement\", \"portal\", \"scroll\", \"visible\"]);\n    var _h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _h[0], setVisible = _h[1];\n    var offcanvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var forkedRef = useForkedRef(ref, offcanvasRef);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(visible);\n    }, [visible]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        if (_visible) {\n            if (!scroll) {\n                document.body.style.overflow = 'hidden';\n                document.body.style.paddingRight = '0px';\n            }\n            return;\n        }\n        if (!scroll) {\n            document.body.style.removeProperty('overflow');\n            document.body.style.removeProperty('padding-right');\n        }\n    }, [_visible]);\n    var _className = classNames('offcanvas', (_b = {},\n        _b[\"offcanvas-\" + placement] = placement,\n        _b.show = _visible,\n        _b), className);\n    var transitionStyles = {\n        entering: { visibility: 'visible' },\n        entered: { visibility: 'visible' },\n        exiting: { visibility: 'visible' },\n        exited: { visibility: 'hidden' },\n    };\n    var handleDismiss = function () {\n        setVisible(false);\n    };\n    var handleKeyDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function (event) {\n        if (event.key === 'Escape' && keyboard) {\n            return handleDismiss();\n        }\n    }, [ref, handleDismiss]);\n    var offcanvas = function (ref, state) {\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, role: \"dialog\", style: __assign({}, transitionStyles[state]), tabIndex: -1, onKeyDown: handleKeyDown }, rest, { ref: ref }), children)));\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, onEnter: onShow, onEntered: function () { var _a; return (_a = offcanvasRef.current) === null || _a === void 0 ? void 0 : _a.focus(); }, onExit: onHide, timeout: 300 }, function (state) {\n            return typeof window !== 'undefined' && portal\n                ? (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(offcanvas(forkedRef, state), document.body)\n                : offcanvas(forkedRef, state);\n        }),\n        typeof window !== 'undefined' && portal\n            ? backdrop &&\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(CBackdrop, { visible: _visible, onClick: handleDismiss }), document.body)\n            : backdrop && react__WEBPACK_IMPORTED_MODULE_0__.createElement(CBackdrop, { visible: _visible, onClick: handleDismiss })));\n});\nCOffcanvas.propTypes = {\n    backdrop: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    keyboard: PropTypes.bool,\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    placement: PropTypes.oneOf(['start', 'end', 'top', 'bottom'])\n        .isRequired,\n    portal: PropTypes.bool,\n    scroll: PropTypes.bool,\n    visible: PropTypes.bool,\n};\nCOffcanvas.displayName = 'COffcanvas';\n\nvar COffcanvasBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('offcanvas-body', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCOffcanvasBody.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCOffcanvasBody.displayName = 'COffcanvasBody';\n\nvar COffcanvasHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('offcanvas-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCOffcanvasHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCOffcanvasHeader.displayName = 'COffcanvasHeader';\n\nvar COffcanvasTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, _b = _a.component, Component = _b === void 0 ? 'h5' : _b, className = _a.className, rest = __rest(_a, [\"children\", \"component\", \"className\"]);\n    var _className = classNames('offcanvas-title', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCOffcanvasTitle.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n};\nCOffcanvasTitle.displayName = 'COffcanvasTitle';\n\nvar CSidebarBrand = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('sidebar-brand', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, ref: ref }, rest), children));\n});\nCSidebarBrand.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCSidebarBrand.displayName = 'CSidebarBrand';\n\nvar CSidebarFooter = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('sidebar-footer', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, ref: ref }, rest), children));\n});\nCSidebarFooter.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCSidebarFooter.displayName = 'CSidebarFooter';\n\nvar CSidebarToggler = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('sidebar-toggler', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __assign({ className: _className, ref: ref }, rest), children));\n});\nCSidebarToggler.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCSidebarToggler.displayName = 'CSidebarToggler';\n\nvar CSidebarHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('sidebar-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className, ref: ref }, rest), children));\n});\nCSidebarHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCSidebarHeader.displayName = 'CSidebarHeader';\n\nvar CSpinner = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, color = _a.color, _b = _a.component, Component = _b === void 0 ? 'div' : _b, size = _a.size, _c = _a.variant, variant = _c === void 0 ? 'border' : _c, _d = _a.visuallyHiddenLabel, visuallyHiddenLabel = _d === void 0 ? 'Loading...' : _d, rest = __rest(_a, [\"className\", \"color\", \"component\", \"size\", \"variant\", \"visuallyHiddenLabel\"]);\n    var _className = classNames(\"spinner-\" + variant, \"text-\" + color, size && \"spinner-\" + variant + \"-\" + size, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ className: _className, role: \"status\" }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", { className: \"visually-hidden\" }, visuallyHiddenLabel)));\n});\nCSpinner.propTypes = {\n    className: PropTypes.string,\n    color: colorPropType,\n    component: PropTypes.string,\n    size: PropTypes.oneOf(['sm']),\n    variant: PropTypes.oneOf(['border', 'grow']),\n    visuallyHiddenLabel: PropTypes.string,\n};\nCSpinner.displayName = 'CSpinner';\n\nvar CTable = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, align = _a.align, borderColor = _a.borderColor, bordered = _a.bordered, borderless = _a.borderless, caption = _a.caption, className = _a.className, color = _a.color, hover = _a.hover, responsive = _a.responsive, small = _a.small, striped = _a.striped, rest = __rest(_a, [\"children\", \"align\", \"borderColor\", \"bordered\", \"borderless\", \"caption\", \"className\", \"color\", \"hover\", \"responsive\", \"small\", \"striped\"]);\n    var _className = classNames('table', (_b = {},\n        _b[\"align-\" + align] = align,\n        _b[\"caption-\" + caption] = caption,\n        _b[\"border-\" + borderColor] = borderColor,\n        _b['table-bordered'] = bordered,\n        _b['table-borderless'] = borderless,\n        _b[\"table-\" + color] = color,\n        _b['table-hover'] = hover,\n        _b['table-sm'] = small,\n        _b['table-striped'] = striped,\n        _b), className);\n    return responsive ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: typeof responsive === 'boolean' ? 'table-responsive' : \"table-responsive-\" + responsive },\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children))) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"table\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTable.propTypes = {\n    align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n    borderColor: PropTypes.string,\n    bordered: PropTypes.bool,\n    borderless: PropTypes.bool,\n    caption: PropTypes.oneOf(['top']),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    hover: PropTypes.bool,\n    responsive: PropTypes.oneOfType([\n        PropTypes.bool,\n        PropTypes.oneOf(['sm', 'md', 'lg', 'xl', 'xxl']),\n    ]),\n    small: PropTypes.bool,\n    striped: PropTypes.bool,\n};\nCTable.displayName = 'CTable';\n\nvar CTableBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"className\", \"color\"]);\n    var _className = classNames((_b = {},\n        _b[\"table-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tbody\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTableBody.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCTableBody.displayName = 'CTableBody';\n\nvar CTableCaption = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, props = __rest(_a, [\"children\"]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"caption\", __assign({}, props, { ref: ref }), children));\n});\nCTableCaption.propTypes = {\n    children: PropTypes.node,\n};\nCTableCaption.displayName = 'CTableCaption';\n\nvar CTableDataCell = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, active = _a.active, align = _a.align, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"active\", \"align\", \"className\", \"color\"]);\n    var _className = classNames((_b = {},\n        _b[\"align-\" + align] = align,\n        _b['table-active'] = active,\n        _b[\"table-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"td\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTableDataCell.propTypes = {\n    active: PropTypes.bool,\n    align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCTableDataCell.displayName = 'CTableDataCell';\n\nvar CTableFoot = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"className\", \"color\"]);\n    var _className = classNames((_b = {},\n        _b[\"table-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tfoot\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTableFoot.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCTableFoot.displayName = 'CTableFoot';\n\nvar CTableHead = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"className\", \"color\"]);\n    var _className = classNames((_b = {},\n        _b[\"table-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"thead\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTableHead.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCTableHead.displayName = 'CTableHead';\n\nvar CTableHeaderCell = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"className\", \"color\"]);\n    var _className = classNames((_b = {},\n        _b[\"table-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"th\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTableHeaderCell.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCTableHeaderCell.displayName = 'CTableHeaderCell';\n\nvar CTableRow = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, active = _a.active, align = _a.align, className = _a.className, color = _a.color, rest = __rest(_a, [\"children\", \"active\", \"align\", \"className\", \"color\"]);\n    var _className = classNames((_b = {},\n        _b[\"align-\" + align] = align,\n        _b['table-active'] = active,\n        _b[\"table-\" + color] = color,\n        _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"tr\", __assign({ className: _className ? _className : undefined }, rest, { ref: ref }), children));\n});\nCTableRow.propTypes = {\n    active: PropTypes.bool,\n    align: PropTypes.oneOf(['bottom', 'middle', 'top']),\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n};\nCTableRow.displayName = 'CTableRow';\n\nvar CTabContent = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('tab-content', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCTabContent.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCTabContent.displayName = 'CTabContent';\n\nvar CTabPane = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, onHide = _a.onHide, onShow = _a.onShow, visible = _a.visible, rest = __rest(_a, [\"children\", \"className\", \"onHide\", \"onShow\", \"visible\"]);\n    var getTransitionClass = function (state) {\n        return state === 'entered' && 'show';\n    };\n    var _className = classNames('tab-pane', 'fade', {\n        active: visible,\n    }, className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: visible, onEnter: onShow, onExit: onHide, timeout: 150 }, function (state) {\n        var transitionClass = getTransitionClass(state);\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(_className, transitionClass) }, rest, { ref: ref }), children));\n    }));\n});\nCTabPane.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    visible: PropTypes.bool,\n};\nCTabPane.displayName = 'CTabPane';\n\nvar CToastContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nvar CToast = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var children = _a.children, _c = _a.animation, animation = _c === void 0 ? true : _c, _d = _a.autohide, autohide = _d === void 0 ? true : _d, className = _a.className, color = _a.color, _e = _a.delay, delay = _e === void 0 ? 5000 : _e, index = _a.index, key = _a.key, _f = _a.visible, visible = _f === void 0 ? false : _f, onClose = _a.onClose, onShow = _a.onShow, rest = __rest(_a, [\"children\", \"animation\", \"autohide\", \"className\", \"color\", \"delay\", \"index\", \"key\", \"visible\", \"onClose\", \"onShow\"]);\n    var _g = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false), _visible = _g[0], setVisible = _g[1];\n    var timeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        setVisible(visible);\n    }, [visible]);\n    var contextValues = {\n        visible: _visible,\n        setVisible: setVisible,\n    };\n    // triggered on mount and destroy\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () { return function () { return clearTimeout(timeout.current); }; }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        _autohide();\n    }, [_visible]);\n    var _autohide = function () {\n        if (autohide) {\n            clearTimeout(timeout.current);\n            timeout.current = window.setTimeout(function () {\n                setVisible(false);\n            }, delay);\n        }\n    };\n    var _className = classNames('toast', (_b = {\n            fade: animation\n        },\n        _b[\"bg-\" + color] = color,\n        _b['border-0'] = color,\n        _b), className);\n    var getTransitionClass = function (state) {\n        return state === 'entering'\n            ? 'showing'\n            : state === 'entered'\n                ? 'show'\n                : state === 'exiting'\n                    ? 'showing'\n                    : 'fade';\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, onEnter: function () { return onShow && onShow(index ? index : null); }, onExited: function () { return onClose && onClose(index ? index : null); }, timeout: 250, unmountOnExit: true }, function (state) {\n        var transitionClass = getTransitionClass(state);\n        return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CToastContext.Provider, { value: contextValues },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(_className, transitionClass), \"aria-live\": \"assertive\", \"aria-atomic\": \"true\", role: \"alert\", onMouseEnter: function () { return clearTimeout(timeout.current); }, onMouseLeave: function () { return _autohide; } }, rest, { key: key, ref: ref }), children)));\n    }));\n});\nCToast.propTypes = {\n    animation: PropTypes.bool,\n    autohide: PropTypes.bool,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    color: colorPropType,\n    delay: PropTypes.number,\n    index: PropTypes.number,\n    key: PropTypes.number,\n    onClose: PropTypes.func,\n    onShow: PropTypes.func,\n    visible: PropTypes.bool,\n};\nCToast.displayName = 'CToast';\n\nvar CToastBody = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, rest = __rest(_a, [\"children\", \"className\"]);\n    var _className = classNames('toast-body', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }), children));\n});\nCToastBody.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n};\nCToastBody.displayName = 'CToastBody';\n\nvar CToastClose = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, Component = _a.component, rest = __rest(_a, [\"children\", \"component\"]);\n    var setVisible = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(CToastContext).setVisible;\n    return Component ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, __assign({ onClick: function () { return setVisible(false); } }, rest, { ref: ref }), children)) : (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCloseButton, __assign({ onClick: function () { return setVisible(false); } }, rest, { ref: ref })));\n});\nCToastClose.propTypes = __assign(__assign({}, CCloseButton.propTypes), { component: PropTypes.elementType });\nCToastClose.displayName = 'CToastClose';\n\nvar CToastHeader = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, closeButton = _a.closeButton, rest = __rest(_a, [\"children\", \"className\", \"closeButton\"]);\n    var _className = classNames('toast-header', className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n        children,\n        closeButton && react__WEBPACK_IMPORTED_MODULE_0__.createElement(CToastClose, null)));\n});\nCToastHeader.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    closeButton: PropTypes.bool,\n};\nCToastHeader.displayName = 'CToastHeader';\n\nvar CToaster = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var children = _a.children, className = _a.className, placement = _a.placement, push = _a.push, rest = __rest(_a, [\"children\", \"className\", \"placement\", \"push\"]);\n    var _b = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]), toasts = _b[0], setToasts = _b[1];\n    var index = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {\n        index.current++;\n        push && addToast(push);\n    }, [push]);\n    var addToast = function (push) {\n        setToasts(function (state) { return __spreadArray(__spreadArray([], state, true), [\n            react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(push, {\n                index: index.current,\n                key: index.current,\n                onClose: function (index) {\n                    return setToasts(function (state) { return state.filter(function (i) { return i.props.index !== index; }); });\n                },\n            }),\n        ], false); });\n    };\n    var _className = classNames('toaster toast-container p-3', {\n        'position-fixed': placement,\n        'top-0': placement && placement.includes('top'),\n        'top-50 translate-middle-y': placement && placement.includes('middle'),\n        'bottom-0': placement && placement.includes('bottom'),\n        'start-0': placement && placement.includes('start'),\n        'start-50 translate-middle-x': placement && placement.includes('center'),\n        'end-0': placement && placement.includes('end'),\n    }, className);\n    var toaster = function (ref) {\n        return toasts.length > 0 || children ? (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: _className }, rest, { ref: ref }),\n            children,\n            toasts.map(function (toast) { return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(toast, { visible: true }); }))) : null;\n    };\n    return typeof window !== 'undefined' && placement\n        ? (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(toaster(ref), document.body)\n        : toaster(ref);\n});\nCToaster.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    placement: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.oneOf([\n            'top-start',\n            'top-center',\n            'top-end',\n            'middle-start',\n            'middle-center',\n            'middle-end',\n            'bottom-start',\n            'bottom-center',\n            'bottom-end',\n        ]),\n    ]),\n    push: PropTypes.any,\n};\nCToaster.displayName = 'CToaster';\n\nvar CTooltip = function (_a) {\n    var children = _a.children, content = _a.content, _b = _a.placement, placement = _b === void 0 ? 'top' : _b, onHide = _a.onHide, onShow = _a.onShow, _c = _a.trigger, trigger = _c === void 0 ? 'hover' : _c, visible = _a.visible, rest = __rest(_a, [\"children\", \"content\", \"placement\", \"onHide\", \"onShow\", \"trigger\", \"visible\"]);\n    var _d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visible), _visible = _d[0], setVisible = _d[1];\n    var getTransitionClass = function (state) {\n        return state === 'entering'\n            ? 'fade'\n            : state === 'entered'\n                ? 'fade show'\n                : state === 'exiting'\n                    ? 'fade'\n                    : 'fade';\n    };\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Manager, null,\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(Reference, null, function (_a) {\n            var ref = _a.ref;\n            return react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(children, __assign(__assign(__assign({ ref: ref }, ((trigger === 'click' || trigger.includes('click')) && {\n                onClick: function () { return setVisible(!_visible); },\n            })), ((trigger === 'focus' || trigger.includes('focus')) && {\n                onFocus: function () { return setVisible(true); },\n                onBlur: function () { return setVisible(false); },\n            })), ((trigger === 'hover' || trigger.includes('hover')) && {\n                onMouseEnter: function () { return setVisible(true); },\n                onMouseLeave: function () { return setVisible(false); },\n            })));\n        }),\n        typeof window !== 'undefined' &&\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal)(react__WEBPACK_IMPORTED_MODULE_0__.createElement(Transition$1, { in: _visible, mountOnEnter: true, onEnter: onShow, onExit: onHide, timeout: {\n                    enter: 0,\n                    exit: 200,\n                }, unmountOnExit: true }, function (state) {\n                var transitionClass = getTransitionClass(state);\n                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(Popper, { placement: placement }, function (_a) {\n                    var arrowProps = _a.arrowProps, style = _a.style, ref = _a.ref;\n                    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: classNames(\"tooltip bs-tooltip-\" + (placement === 'left' ? 'start' : placement === 'right' ? 'end' : placement), transitionClass), ref: ref, role: \"tooltip\", style: style }, rest),\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __assign({ className: \"tooltip-arrow\" }, arrowProps)),\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"tooltip-inner\" }, content)));\n                }));\n            }), document.body)));\n};\nCTooltip.propTypes = {\n    children: PropTypes.any,\n    content: PropTypes.node,\n    placement: PropTypes.oneOf(['auto', 'top', 'right', 'bottom', 'left']),\n    onHide: PropTypes.func,\n    onShow: PropTypes.func,\n    trigger: triggerPropType,\n    visible: PropTypes.bool,\n};\nCTooltip.displayName = 'CTooltip';\n\nvar CWidgetStatsA = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var action = _a.action, chart = _a.chart, className = _a.className, color = _a.color, title = _a.title, value = _a.value, rest = __rest(_a, [\"action\", \"chart\", \"className\", \"color\", \"title\", \"value\"]);\n    var _className = classNames((_b = {}, _b[\"bg-\" + color] = color, _b['text-high-emphasis-inverse'] = color, _b), className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCard, __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardBody, { className: \"pb-0 d-flex justify-content-between align-items-start\" },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\n                value && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"fs-4 fw-semibold\" }, value),\n                title && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, title)),\n            action),\n        chart));\n});\nCWidgetStatsA.propTypes = {\n    action: PropTypes.node,\n    chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    className: PropTypes.string,\n    color: colorPropType,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n};\nCWidgetStatsA.displayName = 'CWidgetStatsA';\n\nvar CWidgetStatsB = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, color = _a.color, inverse = _a.inverse, progress = _a.progress, text = _a.text, title = _a.title, value = _a.value, rest = __rest(_a, [\"className\", \"color\", \"inverse\", \"progress\", \"text\", \"title\", \"value\"]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCard, __assign({ className: className, color: color }, (inverse && { textColor: 'high-emphasis-inverse' }), rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardBody, null,\n            value && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"fs-4 fw-semibold\" }, value),\n            title && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, title),\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(CProgress, __assign({ className: \"my-2\", height: 4 }, (inverse && { white: true }), progress)),\n            text && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"small\", { className: inverse ? 'text-medium-emphasis-inverse' : 'text-medium-emphasis' }, text)))));\n});\nCWidgetStatsB.propTypes = {\n    className: PropTypes.string,\n    color: colorPropType,\n    inverse: PropTypes.bool,\n    progress: PropTypes.object,\n    text: PropTypes.string,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n};\nCWidgetStatsB.displayName = 'CWidgetCWidgetStatsB';\n\nvar CWidgetStatsC = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, color = _a.color, icon = _a.icon, inverse = _a.inverse, progress = _a.progress, title = _a.title, value = _a.value, rest = __rest(_a, [\"className\", \"color\", \"icon\", \"inverse\", \"progress\", \"title\", \"value\"]);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCard, __assign({ className: className, color: color }, (inverse && { textColor: 'high-emphasis-inverse' }), rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardBody, null,\n            icon && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"text-medium-emphasis\" + (inverse ? '-inverse' : '') + \" text-end mb-4\" }, icon)),\n            value && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"text-high-emphasis\" + (inverse ? '-inverse' : '') + \" fs-4 fw-semibold\" }, value)),\n            title && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: inverse ? 'text-medium-emphasis-inverse' : 'text-medium-emphasis' }, title)),\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(CProgress, __assign({ className: \"mt-3 mb-0\", height: 4 }, (inverse && { white: true }), progress)))));\n});\nCWidgetStatsC.propTypes = {\n    className: PropTypes.string,\n    color: colorPropType,\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    inverse: PropTypes.bool,\n    progress: PropTypes.object,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n};\nCWidgetStatsC.displayName = 'CWidgetStatsCWidgetStatsC';\n\nvar CWidgetStatsD = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var _b;\n    var className = _a.className, chart = _a.chart, color = _a.color, icon = _a.icon, values = _a.values, rest = __rest(_a, [\"className\", \"chart\", \"color\", \"icon\", \"values\"]);\n    var _className = classNames(className);\n    var classNameHeader = classNames('position-relative d-flex justify-content-center align-items-center', (_b = {},\n        _b[\"bg-\" + color] = color,\n        _b));\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCard, __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardHeader, { className: classNameHeader },\n            icon,\n            chart),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardBody, { className: \"row text-center\" }, values &&\n            values.map(function (value, index) {\n                return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, { key: index },\n                    index % 2 !== 0 && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"vr\" }),\n                    react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCol, null,\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"fs-5 fw-semibold\" }, value.value),\n                        react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"text-uppercase text-medium-emphasis small\" }, value.title))));\n            }))));\n});\nCWidgetStatsD.propTypes = {\n    chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    className: PropTypes.string,\n    color: colorPropType,\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    values: PropTypes.arrayOf(PropTypes.any),\n};\nCWidgetStatsD.displayName = 'CWidgetStatsD';\n\nvar CWidgetStatsE = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var chart = _a.chart, className = _a.className, title = _a.title, value = _a.value, rest = __rest(_a, [\"chart\", \"className\", \"title\", \"value\"]);\n    var _className = classNames(className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCard, __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardBody, { className: \"text-center\" },\n            title && (react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"text-medium-emphasis small text-uppercase fw-semibold\" }, title)),\n            value && react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"fs-6 fw-semibold py-3\" }, value),\n            chart)));\n});\nCWidgetStatsE.propTypes = {\n    children: PropTypes.node,\n    chart: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    className: PropTypes.string,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n};\nCWidgetStatsE.displayName = 'CWidgetStatsE';\n\nvar CWidgetStatsF = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (_a, ref) {\n    var className = _a.className, color = _a.color, footer = _a.footer, icon = _a.icon, _b = _a.padding, padding = _b === void 0 ? true : _b, title = _a.title, value = _a.value, rest = __rest(_a, [\"className\", \"color\", \"footer\", \"icon\", \"padding\", \"title\", \"value\"]);\n    var _className = classNames(className);\n    return (react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCard, __assign({ className: _className }, rest, { ref: ref }),\n        react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardBody, { className: \"d-flex align-items-center \" + (padding === false && 'p-0') },\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"me-3 text-white bg-\" + color + \" \" + (padding ? 'p-3' : 'p-4') }, icon),\n            react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null,\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"fs-6 fw-semibold text-\" + color }, value),\n                react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", { className: \"text-medium-emphasis text-uppercase fw-semibold small\" }, title))),\n        footer && react__WEBPACK_IMPORTED_MODULE_0__.createElement(CCardFooter, null, footer)));\n});\nCWidgetStatsF.propTypes = {\n    className: PropTypes.string,\n    color: colorPropType,\n    footer: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    padding: PropTypes.bool,\n    title: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.node, PropTypes.number]),\n};\nCWidgetStatsF.displayName = 'CWidgetStatsF';\n\n\n//# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///475\n")},727:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "OL": () => (/* binding */ NavLink)\n/* harmony export */ });\n/* unused harmony exports BrowserRouter, HashRouter, Link */\n/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(977);\n/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(721);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(294);\n/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(697);\n/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(462);\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(366);\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(177);\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter = /*#__PURE__*/function (_React$Component) {\n  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_3__/* .createBrowserHistory */ .lX)(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_4__/* .Router */ .F0, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\nif (false) {}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter = /*#__PURE__*/function (_React$Component) {\n  (0,_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .Z)(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = (0,history__WEBPACK_IMPORTED_MODULE_3__/* .createHashHistory */ .q_)(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_4__/* .Router */ .F0, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n\nif (false) {}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === "function" ? to(currentLocation) : to;\n};\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === "string" ? (0,history__WEBPACK_IMPORTED_MODULE_3__/* .createLocation */ .ob)(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef;\n\nif (typeof forwardRef === "undefined") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(_ref, ["innerRef", "navigate", "onClick"]);\n\n  var target = rest.target;\n\n  var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === "_self") && // let browser handle "target=_blank" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("a", props);\n});\n\nif (false) {}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(_ref2, ["component", "replace", "to", "innerRef"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_4__/* .__RouterContext.Consumer */ .s6.Consumer, null, function (context) {\n    !context ?  false ? 0 : (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(false) : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : "";\n\n    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var isDuplicateNavigation = (0,history__WEBPACK_IMPORTED_MODULE_3__/* .createPath */ .Ep)(context.location) === (0,history__WEBPACK_IMPORTED_MODULE_3__/* .createPath */ .Ep)(normalizeToLocation(location));\n        var method = replace || isDuplicateNavigation ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(component, props);\n  });\n});\n\nif (false) { var refType, toType; }\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef;\n\nif (typeof forwardRef$1 === "undefined") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(" ");\n}\n/**\n * A <Link> wrapper that knows if it\'s "active" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref["aria-current"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = (0,_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Z)(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);\n\n  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(react_router__WEBPACK_IMPORTED_MODULE_4__/* .__RouterContext.Consumer */ .s6.Consumer, null, function (context) {\n    !context ?  false ? 0 : (0,tiny_invariant__WEBPACK_IMPORTED_MODULE_7__/* ["default"] */ .Z)(false) : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, "\\\\$1");\n    var match = escapedPath ? (0,react_router__WEBPACK_IMPORTED_MODULE_4__/* .matchPath */ .LX)(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = typeof classNameProp === "function" ? classNameProp(isActive) : classNameProp;\n    var style = typeof styleProp === "function" ? styleProp(isActive) : styleProp;\n\n    if (isActive) {\n      className = joinClassnames(className, activeClassName);\n      style = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)({}, style, activeStyle);\n    }\n\n    var props = (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .Z)({\n      "aria-current": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(Link, props);\n  });\n});\n\nif (false) { var ariaCurrentType; }\n\n\n//# sourceMappingURL=react-router-dom.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///727\n')},987:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (/* binding */ _objectWithoutProperties)\n/* harmony export */ });\n/* harmony import */ var _objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(366);\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = (0,_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z)(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg3LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBNkU7QUFDOUQ7QUFDZjtBQUNBLGVBQWUscUZBQTRCO0FBQzNDOztBQUVBO0FBQ0E7O0FBRUEsZ0JBQWdCLDZCQUE2QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2JvaWxlcnBsYXRlQXBwLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzPzExN2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIi4vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///987\n')}}]);